{
	"success": true,
	"data": [{
		"id": "5e4fa8531225c9423dcda9d8",
		"author_id": "51f0f267f4963ade0e08f503",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><p>感谢大家的鼎力支持，Node.js 开发者问卷调查报告已经出炉~~</p>\n<p>点击 GitHub Page 地址访问更多报告内容： <a href=\"https://nodersurvey.github.io/reporters/\">https://nodersurvey.github.io/reporters/</a></p>\n<p>原问卷链接请戳：<a href=\"https://www.wjx.cn/jq/62950743.aspx\">https://www.wjx.cn/jq/62950743.aspx</a></p>\n</div>",
		"title": "Node.js 开发者调查问卷 [报告已出炉]",
		"last_reply_at": "2020-05-13T05:55:32.554Z",
		"good": false,
		"top": true,
		"reply_count": 22,
		"visit_count": 34180,
		"create_at": "2020-02-21T09:52:19.108Z",
		"author": {
			"loginname": "lellansin",
			"avatar_url": "https://avatars3.githubusercontent.com/u/48575523?v=4&s=120"
		}
	}, {
		"id": "5e16978581adfe260207a8c1",
		"author_id": "54009f5ccd66f2eb37190485",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><h2>活动信息</h2>\n<p><img src=\"//static.cnodejs.org/Fsqzwb41k7ivzIJn810EEwPQ_2it\" alt=\"1111.png\"></p>\n<p><img src=\"//static.cnodejs.org/Fu_XCoMAB8uUlFYPGWQ3ncssCb8t\" alt=\"2222.png\"></p>\n<p><img src=\"//static.cnodejs.org/Fge-hr_LF_guf0BbwQ9xmi0unnNi\" alt=\"33333.png\"></p>\n<p>本次活动需要提前报名，场地大约有100人</p>\n<p>报名连接</p>\n<p><a href=\"https://www.huodongxing.com/event/5526816284100?utm_source=%E5%8F%91%E7%8E%B0%E6%B4%BB%E5%8A%A8%E9%A1%B5&amp;utm_medium=&amp;utm_campaign=eventspage\">https://www.huodongxing.com/event/5526816284100?utm_source=发现活动页&amp;utm_medium=&amp;utm_campaign=eventspage</a></p>\n<h2>PPT</h2>\n<p><a href=\"https://github.com/i5ting/nodeparty-beijing-2020-1-11\">https://github.com/i5ting/nodeparty-beijing-2020-1-11</a></p>\n<h2>照片</h2>\n<p>龙佳文\n<img src=\"//static.cnodejs.org/Fg4dIjPNKksKiOMmyIgGMEg1087O\" alt=\"111 1.jpg\"></p>\n<p>十忆\n<img src=\"//static.cnodejs.org/Fs9J2dxbgickUDOzM7Vwuxd7HVKF\" alt=\"222 1.jpg\">\n狼叔\n<img src=\"//static.cnodejs.org/Fhc9AmVNEbqAdmxOUTYwIN7XdYU_\" alt=\"3333 1.jpg\">\n王东\n<img src=\"//static.cnodejs.org/FssLOS3hMlVq658eD_yb3CJpeW8C\" alt=\"4444 1.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/Fsuj39b-PoVOS65vAoVgFqbR9m8Q\" alt=\"5555 1.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/FiTD21bRAzZZbpCueJRk7Uq-Ik7i\" alt=\"7777 1.jpg\">\n现场提问\n<img src=\"//static.cnodejs.org/Fm6ssdq_P6JNaftwAZ_AyiXtVIxb\" alt=\"8888 1.jpg\">\n流司\n<img src=\"//static.cnodejs.org/FoqgjwSNssTlJ1ufnowc1jxx_imR\" alt=\"9923 1.jpg\">\n现场提问\n<img src=\"//static.cnodejs.org/FplNNONJOacRNbvnvc7EBl1sgN8U\" alt=\"9999 1.jpg\">\n现场\n<img src=\"//static.cnodejs.org/Fl--jBm9nfRCmNPCvL92TrlkvdGT\" alt=\"11212 1.jpg\"></p>\n<p>圆桌会\n<img src=\"//static.cnodejs.org/Fq7xH6d9K1bor6ixUFY1AEO4d8GU\" alt=\"23323e4ds 1.jpg\">\n<img src=\"//static.cnodejs.org/FulUvueqoTJ8nIGlOgJTD1JFGDPA\" alt=\"322332.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/Ftw6oRg8G-eeqQ2SLrwiaj671sMF\" alt=\"稳稳稳.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/FozWsIovHilxYBlJ-I8LmYW-gNhi\" alt=\"32323.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/Fvhek3xeqE4afj41AuB5Vuj7MwSr\" alt=\"43434.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/FvM4WhrhpkRT9sZ3CxsbGy8OX7bH\" alt=\"55545.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/Fh7MgA9zXpT3Gc-1UfXsd3o8FB6F\" alt=\"111110.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/Fr6oow-uHpFkkoVo2xIaw3Xm-gdI\" alt=\"232323.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/Fl3A1Ijt8IeE9XHT9DNNUM_I0OkB\" alt=\"232332.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/FobbWO7B2JwwszK80ZpJT8Pl6f0Y\" alt=\"322323.jpg\">\n<img src=\"//static.cnodejs.org/Fr7qQvzHT6pLInnX9m6JeFZEjKYC\" alt=\"812312.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/FinFnUdjTZjt2DAdjC5H-DsYZ4Fa\" alt=\"882323.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/Fq-nKPQt4JeiBZAQKft6vW49pGiB\" alt=\"3434389.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/FuAt3QuZ-Y9E21EMrkn05JAcPLsf\" alt=\"9999923.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/FkpIr82doXBBk7VH1aGM6zD16qZ-\" alt=\"23323232323.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/FiKYZ46Ilm5OVT_Tunhmga8x-vrr\" alt=\"232323232332.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/FqOE05r204gsYDWp-m9p04Vf1ME_\" alt=\"aaa.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/FmRRAzINYs-j5hF-n7-LZKscD23e\" alt=\"bbbb.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/FjIIelIuczqPkJjWSKC5wEtv3uzD\" alt=\"cccc.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/FjIIelIuczqPkJjWSKC5wEtv3uzD\" alt=\"cccc.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/FtponmJNP2UD0qemwD_1vBBa0ibK\" alt=\"dddd.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/Fv0LVdt1X6RizMg5gp2CerH1pIMH\" alt=\"dfdfd.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/Fgw6rAtxlJg9fWLlQNM4gwozWlVj\" alt=\"eeeee.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/FlnX4CFVmxrFQXmNWYQuwt6Ar4Et\" alt=\"EmptyName 2.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/FnnoaFaMof3IxOR9sWJIj6jrjcPx\" alt=\"hjkl;'.jpg\"></p>\n<p>王东\n<img src=\"//static.cnodejs.org/FhNqWIas9yk1XuYvNHtijUzB40BK\" alt=\"jhklsd.jpg\"></p>\n<p>嘉宾合影\n<img src=\"//static.cnodejs.org/FvKMqpc7UZhVeRKXUNvtY8FuBAEh\" alt=\"上3.jpg\"></p>\n<p>狼书签名\n<img src=\"//static.cnodejs.org/FgxEWL85ZMEA8qpVakAvvSUWEmVd\" alt=\"23e4232 1.jpg\"></p>\n<h2>视频</h2>\n<p>面向B端工作台的微前端方案-ConsoleOS-徐博文\n<a href=\"https://edu.talkingdata.com/open-class?id=142\">https://edu.talkingdata.com/open-class?id=142</a></p>\n<p>Serverless在美团的实践-龙佳文\n<a href=\"https://edu.talkingdata.com/open-class?id=143\">https://edu.talkingdata.com/open-class?id=143</a></p>\n<p>前端生态建设在瓜子的落地实践-王东\n<a href=\"https://edu.talkingdata.com/open-class?id=144\">https://edu.talkingdata.com/open-class?id=144</a></p>\n<p>Egg-React-SSR深度解析-张宇昂\n<a href=\"https://edu.talkingdata.com/open-class?id=145\">https://edu.talkingdata.com/open-class?id=145</a></p>\n<p>如何融入并贡献开源-Justjavac\n<a href=\"https://edu.talkingdata.com/open-class?id=146\">https://edu.talkingdata.com/open-class?id=146</a></p>\n<p>圆桌讨论\n<a href=\"https://edu.talkingdata.com/open-class?id=147\">https://edu.talkingdata.com/open-class?id=147</a></p>\n</div>",
		"title": "2020年1月11日Node party@北京成功举办，附照片、视频和ppt",
		"last_reply_at": "2020-04-28T06:54:44.600Z",
		"good": true,
		"top": true,
		"reply_count": 11,
		"visit_count": 33785,
		"create_at": "2020-01-09T03:01:25.190Z",
		"author": {
			"loginname": "i5ting",
			"avatar_url": "https://avatars3.githubusercontent.com/u/3118295?v=4&s=120"
		}
	}, {
		"id": "5ebe680fe785ec40b04fd02d",
		"author_id": "55a668125a4b4a86539c2fd4",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><p><img src=\"//static.cnodejs.org/FqZGMMn5Rs27iNpRLh5d1yOyU1Za\" alt=\"image.png\">\n左边的内容由 <strong>ssr-common</strong>服务提供，右边的内容根据不同的url，请求到其它的服务</p>\n<p>首屏渲染的时候，右边内容区域在服务端远程调用其它 SSR 服务的内容，但是在客户端的时候，调用其它远程服务的时候，走CSR渲染。</p>\n<p>哈哈，今天的文章写得比较随意，仅仅只是分享一个小demo。</p>\n<p>如果你是大型的项目，需要做服务拆分的请看这个demo\n<a href=\"https://github.com/fmfe/vue-genesis-micro\">https://github.com/fmfe/vue-genesis-micro</a></p>\n<p>如果你是小型项目，需要做SSR的，可以看下这里demo\n<a href=\"https://github.com/fmfe/genesis-router-demo\">https://github.com/fmfe/genesis-router-demo</a></p>\n<p>至于为什么不使用Nuxt.js，而是选择自己造轮子？\n第一、为了适应业务的发展需要，重构整个Followme5.0网站\n第二、Nuxt.js目前的架构设计，没办法进行服务的拆分\n第三、Nuxt.js的webpack的相关依赖，全部打包到主包的依赖中，导致在生产环境构建docker镜像的时候，特别大。</p>\n<p>最后，项目文档还在不断的完善中，想吃螃蟹的欢迎来试用！我最近经常看cnode社区，欢迎留言讨论。</p>\n<p>实现微前端&amp;微服务的底层库\n<a href=\"https://github.com/fmfe/genesis\">https://github.com/fmfe/genesis</a></p>\n</div>",
		"title": "分享一个简单的 Vue SSR 实现的微前端&微服务的demo",
		"last_reply_at": "2020-05-15T09:59:43.459Z",
		"good": false,
		"top": false,
		"reply_count": 0,
		"visit_count": 121,
		"create_at": "2020-05-15T09:59:43.459Z",
		"author": {
			"loginname": "1340641314",
			"avatar_url": "https://avatars3.githubusercontent.com/u/48575523?v=4&s=120"
		}
	}, {
		"id": "5ebd845fe785ec40b04fcdce",
		"author_id": "5e61e58c3cadb020b915fab3",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><p>「Deno is a simple, modern and secure runtime for JavaScript and TypeScript that uses V8 and is built in Rust.」</p>\n<p>翻譯：Deno 是使用 V8 并内置于 Rust 的 JavaScript 和 TypeScript 的简单，现代且安全的运行时。</p>\n<p>我們可以是站在「Nodejs 之父」的肩膀上，開始了解和嘗試使用。</p>\n<p>真香警告：Promise 語法 + TypeScript 支持 + ES 模塊 + …</p>\n<ul>\n<li>簡介</li>\n</ul>\n<p>「deno 这个名字就是来自 Node 的字母重新组合（Node = no + de），\n表示&quot;拆除 Node.js&quot;（de = destroy, no = Node.js）。」</p>\n<p>轉載自阮一峰老師的網絡日誌 <a href=\"http://www.ruanyifeng.com/blog/2020/01/deno-intro.html%E3%80%82\">http://www.ruanyifeng.com/blog/2020/01/deno-intro.html。</a></p>\n<ul>\n<li>\n<p>github\n<a href=\"https://github.com/denoland\">https://github.com/denoland</a></p>\n</li>\n<li>\n<p>官網\n<a href=\"https://deno.land/\">https://deno.land/</a></p>\n</li>\n</ul>\n</div>",
		"title": "Deno 已來，你來不來？",
		"last_reply_at": "2020-05-15T08:38:25.258Z",
		"good": false,
		"top": false,
		"reply_count": 2,
		"visit_count": 700,
		"create_at": "2020-05-14T17:48:15.869Z",
		"author": {
			"loginname": "jaylin1011",
			"avatar_url": "https://avatars3.githubusercontent.com/u/48575523?v=4&s=120"
		}
	}, {
		"id": "5e8e9c3064259617c49a5025",
		"author_id": "5c81f15090c14711cc8cb87e",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><p>教程讲了Nodejs的基础以及一些新特性、以及如何用nodejs封装一个类似于Express框架、还讲了Mongodb高级查询 聚合管道等内容</p>\n<p><strong>网盘链接</strong>： <a href=\"https://pan.baidu.com/s/1KmOwI3tKtMGwLXJhr5Om0w\">https://pan.baidu.com/s/1KmOwI3tKtMGwLXJhr5Om0w</a>      <strong>提取码</strong>：h87t</p>\n<p><strong>B站在线地址：</strong>  <a href=\"https://www.bilibili.com/video/av38925557/?p=1\">https://www.bilibili.com/video/av38925557/?p=1</a></p>\n<p>拿走不谢  新手帮助还是挺大的</p>\n</div>",
		"title": "2020录制的Nodejs+Mongodb+Koa2入门实战视频教程（44讲网盘免费下载-B站免费看）",
		"last_reply_at": "2020-05-15T07:46:03.525Z",
		"good": false,
		"top": false,
		"reply_count": 7,
		"visit_count": 4775,
		"create_at": "2020-04-09T03:53:20.003Z",
		"author": {
			"loginname": "phonegap100",
			"avatar_url": "https://avatars1.githubusercontent.com/u/5773766?v=4&s=120"
		}
	}, {
		"id": "5df828db76a67b5e0e4186e7",
		"author_id": "5c8b07957ce0df37324281f2",
		"tab": "ask",
		"content": "<div class=\"markdown-text\"><p>nestjs 微服务教程有没有</p>\n</div>",
		"title": "nestjs 微服务教程有没有",
		"last_reply_at": "2020-05-15T07:44:03.446Z",
		"good": false,
		"top": false,
		"reply_count": 15,
		"visit_count": 4799,
		"create_at": "2019-12-17T01:01:15.026Z",
		"author": {
			"loginname": "xuemeifenglin",
			"avatar_url": "https://avatars3.githubusercontent.com/u/48575523?v=4&s=120"
		}
	}, {
		"id": "56cef313a1658d484d7a3676",
		"author_id": "563f17d0b0cedafd38970462",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><p>在中国有很多特色的东西，防火长城阻碍了很多人浏览外界的机会，也成就了很多人，比如：一度很火的红杏。但是，这些服务，都不长久，慢慢都被和谐了。所以，掌握几个免费的Vpn是必要的。这里，介绍我常用的几个，希望对大家有帮助：</p>\n<h2>（1）Lantern</h2>\n<p>这是一个免费、简单、开源，基于P2P网络，去中心化的应用程序。它的目标就是帮助你随时随地快速、可靠、安全地访问互联网。支持移动android等。</p>\n<p>源码在这里：<a href=\"https://github.com/getlantern/lantern\">https://github.com/getlantern/lantern</a></p>\n<p>官方网站https://getlantern.org/</p>\n<p>直接下载安装即可。</p>\n<h2>（2）Bitnet</h2>\n<p>中文名叫微币，原来叫vpncoin，是一种加密货币，当然也是去中心化的应用了。一开始也是以提供科学上网vpn起家的，你可以在线挣取其他节点的上网时间。</p>\n<p>官网：<a href=\"http://www.bitnet.cc/\">http://www.bitnet.cc/</a></p>\n<h2>（3）自己快速搭建</h2>\n<p>亚马逊，提供了一个1年期的免费主机，配置也足够用了。在 ec2虚拟机上，安装一个Ubuntu服务器。使用下面的一条命令，打造一个ssh代理：</p>\n<pre class=\"prettyprint\"><code>sudo ssh -v -i ~&#x2F;.ssh&#x2F;Your.pem ubuntu@[EC2公网IP] -D 8888 -C\n</code></pre><p>Your.pem是您的密钥，aws必须的。EC2公网IP，aws会自动分配。8888为代理端口号，代理服务器是<code>localhost</code>。然后，在浏览器的代理设置里，就可以直接用了。</p>\n<p>喜欢加密货币的小盆友，可以联系我，微信：kubying</p>\n</div>",
		"title": "使用VPN翻Qiang，还用花钱吗？告诉你三种简单快捷的省钱方法。。。",
		"last_reply_at": "2020-05-15T07:01:26.723Z",
		"good": false,
		"top": false,
		"reply_count": 9,
		"visit_count": 27432,
		"create_at": "2016-02-25T12:26:59.486Z",
		"author": {
			"loginname": "imfly",
			"avatar_url": "https://avatars1.githubusercontent.com/u/5773766?v=4&s=120"
		}
	}, {
		"id": "5ebba355e785ec40b04fc1de",
		"author_id": "5eb37c9ae785ec40b04faeae",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><p>由于原项目的前端使用的是<strong>ejs</strong>，没有用到三大框架。考虑到nodejs开发者好多是从前端转过来或同时具备前端开发的能力，</p>\n<p>所以笔者计划用<strong>react</strong>重构前端界面，考虑到社区需要<strong>服务端渲染</strong>和<strong>管理全局数据</strong>，所以使用了nextjs和redux。</p>\n<p>原项目采用的技术栈：Nodejs, Express, Mongodb, Redis, <strong>ejs</strong>和less，典型的MVC架构</p>\n<p>本仓库采用的技术栈：Nodejs, Express, Mongodb, Redis, <strong>React</strong>, <strong>Redux</strong>, <strong>nextjs</strong>, <strong>webpack</strong>和less</p>\n<p>由于时间和精力，本仓库只React化了社区主页和所有导航导航页面，可以使用github快捷登录，但不能注册邮箱登录。</p>\n<p>本仓库仅用作技术交流，有兴趣的同学，欢迎加入一起happy哈。</p>\n<p>react项目地址：<a href=\"https://github.com/zhoushoujian/Nodeclub-React\">Nodeclub - React</a></p>\n<p>体验地址： <a href=\"http://192.144.213.72:3333/\">http://192.144.213.72:3333/</a></p>\n<p>最后：体验地址里引用了https://cnodejs.org/一些帖子，如有侵权，欢迎联系笔者。此项目暂不属于cnode.org官方项目，正在努力争取。</p>\n</div>",
		"title": "Cnode社区的react版本已在完善中，欢迎志同道合的同学加入",
		"last_reply_at": "2020-05-15T02:10:38.778Z",
		"good": false,
		"top": false,
		"reply_count": 2,
		"visit_count": 745,
		"create_at": "2020-05-13T07:35:49.876Z",
		"author": {
			"loginname": "zhoushoujian",
			"avatar_url": "https://avatars1.githubusercontent.com/u/5773766?v=4&s=120"
		}
	}, {
		"id": "5e7dad2264259617c49a32f4",
		"author_id": "5e61fec023bc9e20b4e326d3",
		"tab": "ask",
		"content": "<div class=\"markdown-text\"><p>nodejs与node这是两个东西吗？\n我用nodejs -v查询版本号，与node -v 查询，两个版本号不一样。 若是两个东西，能详细解释下两者什么关系，或区别吗？</p>\n<p><img src=\"//static.cnodejs.org/FkP9JTFgjip-Oa_eOtRagj5mWegj\" alt=\"eg3.jpg\"></p>\n</div>",
		"title": "菜鸟傻傻的提问，关于 nodejs与node",
		"last_reply_at": "2020-05-15T02:08:45.574Z",
		"good": false,
		"top": false,
		"reply_count": 7,
		"visit_count": 3355,
		"create_at": "2020-03-27T07:37:06.877Z",
		"author": {
			"loginname": "lupy0925",
			"avatar_url": "https://avatars1.githubusercontent.com/u/61857802?v=4&s=120"
		}
	}, {
		"id": "5ebddbe7e785ec40b04fcdd9",
		"author_id": "59bcd46ad7cbefc51196443f",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><p>各位好，近期在用 <a href=\"https://gn.googlesource.com/gn/+/master/docs/reference.md\">gn</a> 的帮助指令时，感觉它的帮助指令很是方便，于是突发奇想，node.js 是不是也可以从命令行中直接查看官方 api，我在 npm 仓库中找了一圈，发现没有类似的依赖，于是动手写了一个 <a href=\"https://github.com/zhangwinning/show-node-api\">show-node-api</a>。文档内容的显示方式是采用 linux 的 less 模式，这里是借鉴的 liunx 的 man 指令。</p>\n<p>现在支持的平台有 mac OS/liunx，windows 暂时没测过。</p>\n<p>个人觉的这个小工具可以方便那些经常在 linux 或者终端编程的人，因为习惯了终端，大家都希望在终端中解决一切事情(比如俺👀)，因为切换界面也是时间的浪费嘛。然而我也相信这个小工具也是有缺陷的，如果大家有什么想法，希望大家踊跃提 issue/pr/star，最后撒花结束。</p>\n<p>本项目后序 todo</p>\n<ul>\n<li>因为不同 node.js 版本的文档是有些许差异的，现在是写死保存到仓库里，后面会根据不同的 node 版本拉取远程不同的文档。</li>\n<li>项目中提到的 todo/测试用例还有待优化。</li>\n</ul>\n<p>演示demo:</p>\n<p><img src=\"https://wx4.sinaimg.cn/large/e8616f3dly1gessfqxgzqg20ci0a8b2a.gif\" alt=\"demo\"></p>\n</div>",
		"title": "命令行查看 node.js  官方文档的工具",
		"last_reply_at": "2020-05-15T01:42:32.884Z",
		"good": false,
		"top": false,
		"reply_count": 4,
		"visit_count": 325,
		"create_at": "2020-05-15T00:01:43.160Z",
		"author": {
			"loginname": "WenNingZhang",
			"avatar_url": "https://avatars1.githubusercontent.com/u/23034399?v=4&s=120"
		}
	}, {
		"id": "53b93bab1b009b31532ef934",
		"author_id": "50f7a0a9df9e9fcc5889a1b0",
		"content": "<div class=\"markdown-text\"><p>要安全的, 要用gmail.\n封这么厉害…</p>\n</div>",
		"title": "有靠谱的VPN推荐吗?",
		"last_reply_at": "2020-05-14T16:57:19.744Z",
		"good": false,
		"top": false,
		"reply_count": 61,
		"visit_count": 141821,
		"create_at": "2014-07-06T12:06:03.451Z",
		"author": {
			"loginname": "ronincn",
			"avatar_url": "//gravatar.com/avatar/0582e15ee13a3fef9d78dac6f0c71575?size=48"
		}
	}, {
		"id": "5ebbba032d0afc4087f54ff3",
		"author_id": "5e53bd031225c9423dcdad83",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><p><a href=\"https://zh.wikipedia.org/zh-hans/OpenVPN\">OpenVPN是开源商业软件</a>，它实施虚拟专用网（VPN）技术，以在路由或桥接配置以及远程访问设施中创建安全的点对点或站点对站点连接。 它使用定制安全协议，该协议利用SSL / TLS进行密钥交换。 它能够遍历网络地址转换器（NAT）和防火墙。</p>\n<p>OpenVPN允许对等方使用预共享的密钥，证书或用户名/密码来相互认证。 在多客户端服务器配置中使用时，它允许服务器使用签名和证书颁发机构为每个客户端发布身份验证证书。 它广泛使用OpenSSL加密库以及TLS协议，并且包含许多安全性和控制功能。</p>\n<p><strong>加密:</strong>\n它使用OpenSSL库软件包对所有类型的数据进行加密。 这一天是私人的还是数据传输的。 它允许OpenVPN使用OpenSSL软件包中提供的所有密码。</p>\n<p><strong>认证方式:</strong>\nOpenVPN有几种相互认证对方的方法。 OpenVPN提供预共享密钥，基于证书的身份验证和基于用户名/密码的身份验证。 预共享密钥最简单，而基于证书的密钥最健壮且功能丰富。</p>\n<p><strong>联网:</strong>\nOpenISP使用通用网络协议（TCP和UDP）使其成为IPsec的理想替代方案，在这种情况下，ISP可能会阻止特定的VPN协议，以迫使用户订阅价格更高的“业务级”服务层。</p>\n<p><strong>OpenVPN和操作系统：</strong>\nOpenvpn与市场上所有可用的操作系统兼容，您要做的就是下载运行的库。 然后与<a href=\"https://www.purevpn.com/hk/what-is-vpn/protocols/openvpn\">支持OpenVPN协调的服务器建立连接</a>。</p>\n<p><strong>安全性：</strong>\nOpenVPN提供了各种内部安全功能。 它通过OpenSSL库具有高达256位的加密，尽管某些服务提供商可能会提供较低的速率，从而有效地为消费者提供了一些最快的VPN。</p>\n</div>",
		"title": "OpenVPN和它的主要功能",
		"last_reply_at": "2020-05-14T16:54:28.590Z",
		"good": false,
		"top": false,
		"reply_count": 1,
		"visit_count": 869,
		"create_at": "2020-05-13T09:12:35.901Z",
		"author": {
			"loginname": "Jamieccv1",
			"avatar_url": "https://avatars1.githubusercontent.com/u/61415557?v=4&s=120"
		}
	}, {
		"id": "5ebd76592d0afc4087f55bda",
		"author_id": "5ebd758a2d0afc4087f55bd6",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><p>自己搭建的VPN，欢迎大家测试给意见，只供研究使用，谢谢</p>\n<p>电报频道可以下载vpn，电报地址如下：\n<a href=\"https://t.me/FreeVPNSS\">https://t.me/FreeVPNSS</a>\n目前我做了1.0.1版本</p>\n<p>采用Trojan技术\n我自己测试下载速度600-1M左右\n看YT一点不卡\n我把服务器放在新加坡的，所以打开app，会有白屏3秒时间，这个问题有大神能解决吗？\n真心技术男，求技术大神指教！</p>\n</div>",
		"title": "自己搭建的VPN，欢迎大家测试给意见，只供研究使用，谢谢",
		"last_reply_at": "2020-05-14T16:48:25.832Z",
		"good": false,
		"top": false,
		"reply_count": 0,
		"visit_count": 565,
		"create_at": "2020-05-14T16:48:25.832Z",
		"author": {
			"loginname": "duonianyihou1",
			"avatar_url": "https://avatars1.githubusercontent.com/u/65359071?v=4&s=120"
		}
	}, {
		"id": "5eae30f5fd11584365d2ce83",
		"author_id": "5bfa5d31be1b120abac5c973",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><p>基于D3.js + React 实现的数据可视化构建工具 在线预览地址\n<a href=\"http://47.107.66.252:8080/#/\"> http://47.107.66.252:8080/#/</a></p>\n<p>源码地址\n<a href=\"https://github.com/CBDxin/chart\">https://github.com/CBDxin/chart</a></p>\n<p>启动</p>\n<pre class=\"prettyprint\"><code>npm run start\n</code></pre><p>声明式配置语法</p>\n<pre class=\"prettyprint\"><code>{\n  height: 700,\n  width: &quot;100%&quot;,\n  charts:[\n    {\n      type:&quot;Area&quot;,\n      name:&quot;区域图&quot;,\n      key:&quot;Area&quot;\n    }\n  ],\n  components:[\n    {\n      type:&quot;xAxis&quot;,\n      position:&quot;bottom&quot;\n    },\n    {\n      type:&quot;yAxis&quot;,\n      position:&quot;left&quot;\n    }\n  ],\n  dataSet:{\n    domain:[1,2,3,4,5,6],\n    range:{\n      Area:[300,500,400,20,600,900]\n    }\n  }\n}\n</code></pre><p>可视化图表：</p>\n<ol>\n<li>\n<p>Area,\n<img src=\"https://upload-images.jianshu.io/upload_images/13434832-d278ce72fe50c2fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Area.png\"></p>\n</li>\n<li>\n<p>AreaStack\n<img src=\"https://upload-images.jianshu.io/upload_images/13434832-77493987a119e637.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"AreaStack.png\"></p>\n</li>\n<li>\n<p>Bar\n<img src=\"https://upload-images.jianshu.io/upload_images/13434832-435c06e6a82eed46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Bar.png\"></p>\n</li>\n<li>\n<p>BarGroup\n<img src=\"https://upload-images.jianshu.io/upload_images/13434832-5a176777f802fe2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"BarGroup.png\"></p>\n</li>\n<li>\n<p>BarStack\n<img src=\"https://upload-images.jianshu.io/upload_images/13434832-84b0d9416f724f19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"BarStack.png\"></p>\n</li>\n<li>\n<p>Geo\n<img src=\"https://upload-images.jianshu.io/upload_images/13434832-df4aff585d2f57a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Geo.png\"></p>\n</li>\n<li>\n<p>Line\n<img src=\"https://upload-images.jianshu.io/upload_images/13434832-cc0bbbeb4f54f326.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Line.png\"></p>\n</li>\n<li>\n<p>Pie\n<img src=\"https://upload-images.jianshu.io/upload_images/13434832-cf3d07406599e635.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Pie.png\"></p>\n</li>\n<li>\n<p>PolarScatter\n<img src=\"https://upload-images.jianshu.io/upload_images/13434832-62eca8c4ccd6a9df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"PolarScatter.png\"></p>\n</li>\n<li>\n<p>Radar\n<img src=\"https://upload-images.jianshu.io/upload_images/13434832-f475747f22870e74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Radar.png\"></p>\n</li>\n<li>\n<p>Scatter\n<img src=\"https://upload-images.jianshu.io/upload_images/13434832-9ec6a57d1ab586f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Scatter.png\"></p>\n</li>\n<li>\n<p>TreeMap\n<img src=\"https://upload-images.jianshu.io/upload_images/13434832-5f328191de64b780.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"TreeMap.png\"></p>\n</li>\n<li>\n<p>Tree\n<img src=\"https://upload-images.jianshu.io/upload_images/13434832-9748d2f462a9ba38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Tree.png\"></p>\n</li>\n</ol>\n<p>可视化组件：</p>\n<ol>\n<li>Scale</li>\n<li>Axis</li>\n<li>Tooltip</li>\n<li>Brush</li>\n<li>Grid</li>\n<li>Legend</li>\n<li>LinearGradient</li>\n<li>VisualMap</li>\n</ol>\n</div>",
		"title": "利用D3与React打造一套可视化构建框架",
		"last_reply_at": "2020-05-14T11:50:44.256Z",
		"good": false,
		"top": false,
		"reply_count": 3,
		"visit_count": 2439,
		"create_at": "2020-05-03T02:48:21.475Z",
		"author": {
			"loginname": "CBDxin",
			"avatar_url": "https://avatars1.githubusercontent.com/u/42411100?v=4&s=120"
		}
	}, {
		"id": "583191e267db500b79c100ed",
		"author_id": "582468cc8e0f8bb038f38b6e",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><p><strong>前言</strong></p>\n<p><strong>此教主要程针对已经能够科学上网,但不想继续花费高额vpn费用的用户.</strong>\n<strong>但是</strong>如果还不会科学上网,也没有关系.请购买<strong>体验套餐</strong>.然后访问gfw.press官网,注册账号.实现<strong>永久免费服务</strong>.</p>\n<blockquote>\n<ul>\n<li>GFW.Press将方法配合SwitchOmega / SocksCap64两款软件实现<strong>一键fq</strong>.*</li>\n</ul>\n</blockquote>\n<hr>\n<p>=======================================完美的分割线======================================</p>\n<h2><strong>1. GFW.Press</strong>\n在这里首先感谢赵国劣绅 石斑鱼大爷  <a href=\"https://github.com/chinashiyu\">github源码</a>\n<strong>教程开始</strong>\n<em>首先要登录官网注册账号,能翻樯的直接登录gfw.press,不能翻樯的先购买体验服务</em>\n** <a href=\"https://my.shadowsocksr.com/cart.php?gid=7\">体验套餐购买地址</a>**\n** <a href=\"https://my.shadowsocksr.com/knowledgebase.php?action=displayarticle&amp;id=26\">购买完毕使用教程</a>**</h2>\n<p>现在已经大家都能够翻樯了.接下来就要使用免费服务了.</p>\n<ul>\n<li>\n<p>1.登录gfw.press官网**(这里需要翻樯)**</p>\n</li>\n<li>\n<p>2.点击注册</p>\n</li>\n<li>\n<p>3.注册成功后点击登录,你将会看到节点信息\n<img src=\"//static.cnodejs.org/FjRR4JHK1lc6SzxNtnAc8HmumyOH\" alt=\"Press用户界面.PNG\"></p>\n</li>\n<li>\n<p>4.下载gfw.press软件. 由于下载经常会断开.我已经下好了.      <a href=\"http://pan.baidu.com/s/1kVlW7np\">百度云链接</a>密码:hffg</p>\n</li>\n<li>\n<p>5.安装完毕后双击打开,并安装gfw.press官网中提供的账号填入节点,端口以及密码.</p>\n</li>\n<li>\n<p>6.打开谷歌浏览器,搜索chrome网上应用店,打开并搜索插件switchomega,安装插件   <strong>(这里需要翻樯)</strong>\n<img src=\"//static.cnodejs.org/FjJmrA7AVIocymjZN_-SN2RgrPih\" alt=\"chrome网上应用店下载switchomega插件.png\"></p>\n</li>\n<li>\n<p>7.下载完毕后,你的谷歌浏览器右上角将多出一个小图标.单击选项按钮进入管理界面.\n<img src=\"//static.cnodejs.org/FvkjspPx9UswCmRl07ZUkxnqSJ8q\" alt=\"switchomega配置说明-1.png\"></p>\n</li>\n<li>\n<p>8.进入管理界面后,进行如下配置\n\t(1)新建情景模式\n<img src=\"//static.cnodejs.org/FkRw9vxJhAECricmXA4xbjG318x6\" alt=\"switchomega配置说明-2.png\">\n\t(2)填入路由信息\n<img src=\"//static.cnodejs.org/FqqxP52d_OWXfxc2BZMuHViObcsm\" alt=\"switchomega配置说明-3.png\"></p>\n</li>\n<li>\n<p>9.填完以后一定记得点击  <strong>应用选项</strong>  保存刚才的配置.然后关闭标签页即可.</p>\n</li>\n<li>\n<p>10.此时单击你右上角的switchomega插件将会多出一个GFW.press选项.\n<img src=\"//static.cnodejs.org/Fn1Px1sehKJoPP35CubVqFTTimxh\" alt=\"untitled1.png\">\n11.点击切换到GFW.Press模式下,恭喜你.可以永久免费翻樯了.\n12.如果你不确定自己有没有成功,那么登录ipip.net就能看到自己的ip地址了.\n<img src=\"//static.cnodejs.org/FtjJX7vhuCy1wx-KHyRddqsUOWRP\" alt=\"switchomega配置说明-5.png\"></p>\n</li>\n</ul>\n</div>",
		"title": "GFW.Press永久翻樯(免费)",
		"last_reply_at": "2020-05-14T10:28:01.721Z",
		"good": false,
		"top": false,
		"reply_count": 30,
		"visit_count": 126760,
		"create_at": "2016-11-20T12:06:58.395Z",
		"author": {
			"loginname": "yuxiaochi12345",
			"avatar_url": "https://avatars.githubusercontent.com/u/18710967?v=3&s=120"
		}
	}, {
		"id": "5ebcebf42d0afc4087f5554a",
		"author_id": "55afa32c9594740e76ab3e2e",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><p><a href=\"https://deno.land/v1\">https://deno.land/v1</a></p>\n</div>",
		"title": "Deno 1.0",
		"last_reply_at": "2020-05-14T10:01:41.875Z",
		"good": false,
		"top": false,
		"reply_count": 1,
		"visit_count": 452,
		"create_at": "2020-05-14T06:57:56.015Z",
		"author": {
			"loginname": "dou4cc",
			"avatar_url": "https://avatars2.githubusercontent.com/u/7764678?v=4&s=120"
		}
	}, {
		"id": "5514b132e26684ed7ff21bf2",
		"author_id": "53fdd8502243147e7857b2bb",
		"tab": "ask",
		"content": "<div class=\"markdown-text\"><p>发现一堆网站上不了\n你们都用什么 VPN? 推荐下\n以前到 V2EX 查，发现 V2EX 也上不了\n免费的付费的都行</p>\n</div>",
		"title": "你用什么 VPN?",
		"last_reply_at": "2020-05-14T05:44:13.062Z",
		"good": false,
		"top": false,
		"reply_count": 49,
		"visit_count": 31406,
		"create_at": "2015-03-27T01:24:02.838Z",
		"author": {
			"loginname": "russj",
			"avatar_url": "https://avatars2.githubusercontent.com/u/2281763?v=4&s=120"
		}
	}, {
		"id": "5ebcc0952d0afc4087f551f7",
		"author_id": "5ebcbf92e785ec40b04fc411",
		"tab": "ask",
		"content": "<div class=\"markdown-text\"><p><img src=\"//static.cnodejs.org/FrgqLoaWjFpBi7e9QpHo_umZLwD1\" alt=\"无标题.png\"></p>\n<p>在html里面运行是没有任何问题的</p>\n<p><img src=\"//static.cnodejs.org/Fsx_VJXqDyT8IotJEPVPHJ030N2V\" alt=\"image.png\"></p>\n</div>",
		"title": "在vue文件中注册组件使用elementui 标签报 [Vue warn]: Injection \"elForm\" not found",
		"last_reply_at": "2020-05-14T03:52:53.356Z",
		"good": false,
		"top": false,
		"reply_count": 0,
		"visit_count": 959,
		"create_at": "2020-05-14T03:52:53.356Z",
		"author": {
			"loginname": "apple626",
			"avatar_url": "https://avatars2.githubusercontent.com/u/65283908?v=4&s=120"
		}
	}, {
		"id": "5ebcaaa32d0afc4087f5516a",
		"author_id": "59a4d33fd97b7e2308242831",
		"tab": "ask",
		"content": "<div class=\"markdown-text\"><p>公司的一个老项目昨天晚上日志里，出现大量的错误：\n\tError: request aborted\nat IncomingMessage.onAborted (/home/www/web/node_modules/co-body/node_modules/raw-body/index.js:269:10)\nat emitNone (events.js:86:13)\nat IncomingMessage.emit (events.js:185:7)\nat abortIncoming (_http_server.js:281:11)\nat Socket.serverSocketCloseListener (_http_server.js:294:5)\nat emitOne (events.js:101:20)\nat Socket.emit (events.js:188:7)\nat TCP._handle.close [as _onclose] (net.js:497:12)\n请问有大佬能给指点一下可能是哪里出现的问题吗？</p>\n</div>",
		"title": "nodejs 后端 遇到 request aborted",
		"last_reply_at": "2020-05-14T03:05:20.793Z",
		"good": false,
		"top": false,
		"reply_count": 2,
		"visit_count": 384,
		"create_at": "2020-05-14T02:19:15.433Z",
		"author": {
			"loginname": "312xiaoguai",
			"avatar_url": "https://avatars0.githubusercontent.com/u/17775548?v=4&s=120"
		}
	}, {
		"id": "5eb8fc4e2d0afc4087f54442",
		"author_id": "5875bd3d06fa6e2a4e4f730b",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><p>起源是在写webscoket服务的时候，发现开发工具偶尔报<code>Maximum call stack size exceeded</code>的问题。由于当时没时间，就草草把<a href=\"https://github.com/zy445566/before-server/commit/bafa7f8a241510b322add1394fc48bddf3a30fbc\">BUG</a>修复了，并未深究原因。现在复盘工作的时候，又想起这个问题，于是再把这个问题拿出来研究。</p>\n<p>出错代码大概是如下：</p>\n<pre class=\"prettyprint language-js\"><code>new Array().push(...Buffer.allocUnsafe(2**17))\n</code></pre><p>一开始看到超出调用栈以为是Buffer的迭代器递归出现了问题，但事实并不是这样。</p>\n<h1>排查出错原因</h1>\n<p>由于出错代码是这样的:</p>\n<pre class=\"prettyprint language-js\"><code>&#x2F;*\n* 而且存在临界点，不同机器略有差异\n* 本人的机器大于2**17就必报\n*&#x2F;\nnew Array().push(...Buffer.allocUnsafe(2**17))\n</code></pre><p>当时认为是Buffer的迭代器问题，所以就尝试使用普通数组</p>\n<pre class=\"prettyprint language-js\"><code>&#x2F;*\n* 这段代码在浏览器也报错\n* 所以排除nodejs原因，应该是V8造成的\n*&#x2F;\nnew Array().push(...new Array(2**17).fill(0xff))\n</code></pre><p>发现普通数组也存在类似问题，接下来就是排除迭代器</p>\n<pre class=\"prettyprint language-js\"><code>[...new Array(2**17).fill(0xff)]\n</code></pre><p>发现迭代居然<code>没有异常</code>，难道是push方法？那就换个方法试试</p>\n<pre class=\"prettyprint language-js\"><code>console.log(...new Array(2**17).fill(0xff))\n</code></pre><p>居然log也报错,那真相只有一个，那就是<code>参数超载</code>了</p>\n<h1>那为什么会报超过最大调用堆栈大小，而不是其它错误？</h1>\n<p>大家都知道，函数再调用函数的时候，是通过存储在调用栈中来保持执行顺序的，而栈是有一定大小，比如递归上数百万次后也会出现爆栈。</p>\n<p>那么是否真的是因为栈不够用了？还是说参数对调用栈也存在一些影响？</p>\n<ol>\n<li>接下来我们就来逐一排查。首先确定是否是真的因为栈不够用了</li>\n</ol>\n<pre class=\"prettyprint language-sh\"><code># 通过调整栈大小，来判断是否是栈耗尽了，stack-size的单位是KB，默认是984\nnode --stack-size=2048 -e &quot;new Array().push(...Buffer.allocUnsafe(2**17))&quot;\n</code></pre><p>发现果然运行正常，所以可以确定是栈耗尽了</p>\n<ol>\n<li>排查参数的数量对栈的影响</li>\n</ol>\n<pre class=\"prettyprint language-js\"><code>function recursionDepth(paramLen) {\n    let deepth = 0;\n    function f(...paramList) {\n        deepth++;\n        Math.random() + f(...paramList); &#x2F;&#x2F; 防止尾递归优化\n    }\n    try{\n        f(...Buffer.allocUnsafe(paramLen))\n    } catch (err) {\n        console.log(&#96;当参数长度为${paramLen}，最大深度则为：${deepth}&#96;)\n    }\n}\n\nrecursionDepth(2**4)\nrecursionDepth(2**8)\nrecursionDepth(2**12)\nrecursionDepth(2**16)\nrecursionDepth(2**20)\n</code></pre><p>输出结果:</p>\n<pre class=\"prettyprint language-sh\"><code>当参数长度为16，最大深度则为：3489\n当参数长度为256，最大深度则为：455\n当参数长度为4096，最大深度则为：30\n当参数长度为65536，最大深度则为：1\n当参数长度为1048576，最大深度则为：0\n</code></pre><p>所以由此确定参数的数量也是需要暂用调用栈的空间，而当参数长度达到足够长，即使1帧也可以压垮整个调用栈，超出调用栈空间。</p>\n</div>",
		"title": "警惕JS数组解构转参数导致爆栈问题",
		"last_reply_at": "2020-05-13T13:26:28.298Z",
		"good": false,
		"top": false,
		"reply_count": 8,
		"visit_count": 954,
		"create_at": "2020-05-11T07:18:38.450Z",
		"author": {
			"loginname": "zy445566",
			"avatar_url": "https://avatars2.githubusercontent.com/u/14976489?v=4&s=120"
		}
	}]
}