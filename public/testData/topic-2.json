{
	"success": true,
	"data": [{
		"id": "5e4fa8531225c9423dcda9d8",
		"author_id": "51f0f267f4963ade0e08f503",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><p>感谢大家的鼎力支持，Node.js 开发者问卷调查报告已经出炉~~</p>\n<p>点击 GitHub Page 地址访问更多报告内容： <a href=\"https://nodersurvey.github.io/reporters/\">https://nodersurvey.github.io/reporters/</a></p>\n<p>原问卷链接请戳：<a href=\"https://www.wjx.cn/jq/62950743.aspx\">https://www.wjx.cn/jq/62950743.aspx</a></p>\n</div>",
		"title": "Node.js 开发者调查问卷 [报告已出炉]",
		"last_reply_at": "2020-05-13T05:55:32.554Z",
		"good": false,
		"top": true,
		"reply_count": 22,
		"visit_count": 34180,
		"create_at": "2020-02-21T09:52:19.108Z",
		"author": {
			"loginname": "lellansin",
			"avatar_url": "https://avatars2.githubusercontent.com/u/2081487?v=4&s=120"
		}
	}, {
		"id": "5e16978581adfe260207a8c1",
		"author_id": "54009f5ccd66f2eb37190485",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><h2>活动信息</h2>\n<p><img src=\"//static.cnodejs.org/Fsqzwb41k7ivzIJn810EEwPQ_2it\" alt=\"1111.png\"></p>\n<p><img src=\"//static.cnodejs.org/Fu_XCoMAB8uUlFYPGWQ3ncssCb8t\" alt=\"2222.png\"></p>\n<p><img src=\"//static.cnodejs.org/Fge-hr_LF_guf0BbwQ9xmi0unnNi\" alt=\"33333.png\"></p>\n<p>本次活动需要提前报名，场地大约有100人</p>\n<p>报名连接</p>\n<p><a href=\"https://www.huodongxing.com/event/5526816284100?utm_source=%E5%8F%91%E7%8E%B0%E6%B4%BB%E5%8A%A8%E9%A1%B5&amp;utm_medium=&amp;utm_campaign=eventspage\">https://www.huodongxing.com/event/5526816284100?utm_source=发现活动页&amp;utm_medium=&amp;utm_campaign=eventspage</a></p>\n<h2>PPT</h2>\n<p><a href=\"https://github.com/i5ting/nodeparty-beijing-2020-1-11\">https://github.com/i5ting/nodeparty-beijing-2020-1-11</a></p>\n<h2>照片</h2>\n<p>龙佳文\n<img src=\"//static.cnodejs.org/Fg4dIjPNKksKiOMmyIgGMEg1087O\" alt=\"111 1.jpg\"></p>\n<p>十忆\n<img src=\"//static.cnodejs.org/Fs9J2dxbgickUDOzM7Vwuxd7HVKF\" alt=\"222 1.jpg\">\n狼叔\n<img src=\"//static.cnodejs.org/Fhc9AmVNEbqAdmxOUTYwIN7XdYU_\" alt=\"3333 1.jpg\">\n王东\n<img src=\"//static.cnodejs.org/FssLOS3hMlVq658eD_yb3CJpeW8C\" alt=\"4444 1.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/Fsuj39b-PoVOS65vAoVgFqbR9m8Q\" alt=\"5555 1.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/FiTD21bRAzZZbpCueJRk7Uq-Ik7i\" alt=\"7777 1.jpg\">\n现场提问\n<img src=\"//static.cnodejs.org/Fm6ssdq_P6JNaftwAZ_AyiXtVIxb\" alt=\"8888 1.jpg\">\n流司\n<img src=\"//static.cnodejs.org/FoqgjwSNssTlJ1ufnowc1jxx_imR\" alt=\"9923 1.jpg\">\n现场提问\n<img src=\"//static.cnodejs.org/FplNNONJOacRNbvnvc7EBl1sgN8U\" alt=\"9999 1.jpg\">\n现场\n<img src=\"//static.cnodejs.org/Fl--jBm9nfRCmNPCvL92TrlkvdGT\" alt=\"11212 1.jpg\"></p>\n<p>圆桌会\n<img src=\"//static.cnodejs.org/Fq7xH6d9K1bor6ixUFY1AEO4d8GU\" alt=\"23323e4ds 1.jpg\">\n<img src=\"//static.cnodejs.org/FulUvueqoTJ8nIGlOgJTD1JFGDPA\" alt=\"322332.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/Ftw6oRg8G-eeqQ2SLrwiaj671sMF\" alt=\"稳稳稳.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/FozWsIovHilxYBlJ-I8LmYW-gNhi\" alt=\"32323.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/Fvhek3xeqE4afj41AuB5Vuj7MwSr\" alt=\"43434.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/FvM4WhrhpkRT9sZ3CxsbGy8OX7bH\" alt=\"55545.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/Fh7MgA9zXpT3Gc-1UfXsd3o8FB6F\" alt=\"111110.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/Fr6oow-uHpFkkoVo2xIaw3Xm-gdI\" alt=\"232323.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/Fl3A1Ijt8IeE9XHT9DNNUM_I0OkB\" alt=\"232332.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/FobbWO7B2JwwszK80ZpJT8Pl6f0Y\" alt=\"322323.jpg\">\n<img src=\"//static.cnodejs.org/Fr7qQvzHT6pLInnX9m6JeFZEjKYC\" alt=\"812312.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/FinFnUdjTZjt2DAdjC5H-DsYZ4Fa\" alt=\"882323.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/Fq-nKPQt4JeiBZAQKft6vW49pGiB\" alt=\"3434389.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/FuAt3QuZ-Y9E21EMrkn05JAcPLsf\" alt=\"9999923.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/FkpIr82doXBBk7VH1aGM6zD16qZ-\" alt=\"23323232323.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/FiKYZ46Ilm5OVT_Tunhmga8x-vrr\" alt=\"232323232332.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/FqOE05r204gsYDWp-m9p04Vf1ME_\" alt=\"aaa.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/FmRRAzINYs-j5hF-n7-LZKscD23e\" alt=\"bbbb.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/FjIIelIuczqPkJjWSKC5wEtv3uzD\" alt=\"cccc.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/FjIIelIuczqPkJjWSKC5wEtv3uzD\" alt=\"cccc.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/FtponmJNP2UD0qemwD_1vBBa0ibK\" alt=\"dddd.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/Fv0LVdt1X6RizMg5gp2CerH1pIMH\" alt=\"dfdfd.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/Fgw6rAtxlJg9fWLlQNM4gwozWlVj\" alt=\"eeeee.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/FlnX4CFVmxrFQXmNWYQuwt6Ar4Et\" alt=\"EmptyName 2.jpg\"></p>\n<p><img src=\"//static.cnodejs.org/FnnoaFaMof3IxOR9sWJIj6jrjcPx\" alt=\"hjkl;'.jpg\"></p>\n<p>王东\n<img src=\"//static.cnodejs.org/FhNqWIas9yk1XuYvNHtijUzB40BK\" alt=\"jhklsd.jpg\"></p>\n<p>嘉宾合影\n<img src=\"//static.cnodejs.org/FvKMqpc7UZhVeRKXUNvtY8FuBAEh\" alt=\"上3.jpg\"></p>\n<p>狼书签名\n<img src=\"//static.cnodejs.org/FgxEWL85ZMEA8qpVakAvvSUWEmVd\" alt=\"23e4232 1.jpg\"></p>\n<h2>视频</h2>\n<p>面向B端工作台的微前端方案-ConsoleOS-徐博文\n<a href=\"https://edu.talkingdata.com/open-class?id=142\">https://edu.talkingdata.com/open-class?id=142</a></p>\n<p>Serverless在美团的实践-龙佳文\n<a href=\"https://edu.talkingdata.com/open-class?id=143\">https://edu.talkingdata.com/open-class?id=143</a></p>\n<p>前端生态建设在瓜子的落地实践-王东\n<a href=\"https://edu.talkingdata.com/open-class?id=144\">https://edu.talkingdata.com/open-class?id=144</a></p>\n<p>Egg-React-SSR深度解析-张宇昂\n<a href=\"https://edu.talkingdata.com/open-class?id=145\">https://edu.talkingdata.com/open-class?id=145</a></p>\n<p>如何融入并贡献开源-Justjavac\n<a href=\"https://edu.talkingdata.com/open-class?id=146\">https://edu.talkingdata.com/open-class?id=146</a></p>\n<p>圆桌讨论\n<a href=\"https://edu.talkingdata.com/open-class?id=147\">https://edu.talkingdata.com/open-class?id=147</a></p>\n</div>",
		"title": "2020年1月11日Node party@北京成功举办，附照片、视频和ppt",
		"last_reply_at": "2020-04-28T06:54:44.600Z",
		"good": true,
		"top": true,
		"reply_count": 11,
		"visit_count": 33785,
		"create_at": "2020-01-09T03:01:25.190Z",
		"author": {
			"loginname": "i5ting",
			"avatar_url": "https://avatars3.githubusercontent.com/u/3118295?v=4&s=120"
		}
	}, {
		"id": "5ebe680fe785ec40b04fd02d",
		"author_id": "55a668125a4b4a86539c2fd4",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><p><img src=\"//static.cnodejs.org/FqZGMMn5Rs27iNpRLh5d1yOyU1Za\" alt=\"image.png\">\n左边的内容由 <strong>ssr-common</strong>服务提供，右边的内容根据不同的url，请求到其它的服务</p>\n<p>首屏渲染的时候，右边内容区域在服务端远程调用其它 SSR 服务的内容，但是在客户端的时候，调用其它远程服务的时候，走CSR渲染。</p>\n<p>哈哈，今天的文章写得比较随意，仅仅只是分享一个小demo。</p>\n<p>如果你是大型的项目，需要做服务拆分的请看这个demo\n<a href=\"https://github.com/fmfe/vue-genesis-micro\">https://github.com/fmfe/vue-genesis-micro</a></p>\n<p>如果你是小型项目，需要做SSR的，可以看下这里demo\n<a href=\"https://github.com/fmfe/genesis-router-demo\">https://github.com/fmfe/genesis-router-demo</a></p>\n<p>至于为什么不使用Nuxt.js，而是选择自己造轮子？\n第一、为了适应业务的发展需要，重构整个Followme5.0网站\n第二、Nuxt.js目前的架构设计，没办法进行服务的拆分\n第三、Nuxt.js的webpack的相关依赖，全部打包到主包的依赖中，导致在生产环境构建docker镜像的时候，特别大。</p>\n<p>最后，项目文档还在不断的完善中，想吃螃蟹的欢迎来试用！我最近经常看cnode社区，欢迎留言讨论。</p>\n<p>实现微前端&amp;微服务的底层库\n<a href=\"https://github.com/fmfe/genesis\">https://github.com/fmfe/genesis</a></p>\n</div>",
		"title": "分享一个简单的 Vue SSR 实现的微前端&微服务的demo",
		"last_reply_at": "2020-05-15T09:59:43.459Z",
		"good": false,
		"top": false,
		"reply_count": 0,
		"visit_count": 121,
		"create_at": "2020-05-15T09:59:43.459Z",
		"author": {
			"loginname": "1340641314",
			"avatar_url": "https://avatars0.githubusercontent.com/u/8424643?v=4&s=120"
		}
	}, {
		"id": "5ebd845fe785ec40b04fcdce",
		"author_id": "5e61e58c3cadb020b915fab3",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><p>「Deno is a simple, modern and secure runtime for JavaScript and TypeScript that uses V8 and is built in Rust.」</p>\n<p>翻譯：Deno 是使用 V8 并内置于 Rust 的 JavaScript 和 TypeScript 的简单，现代且安全的运行时。</p>\n<p>我們可以是站在「Nodejs 之父」的肩膀上，開始了解和嘗試使用。</p>\n<p>真香警告：Promise 語法 + TypeScript 支持 + ES 模塊 + …</p>\n<ul>\n<li>簡介</li>\n</ul>\n<p>「deno 这个名字就是来自 Node 的字母重新组合（Node = no + de），\n表示&quot;拆除 Node.js&quot;（de = destroy, no = Node.js）。」</p>\n<p>轉載自阮一峰老師的網絡日誌 <a href=\"http://www.ruanyifeng.com/blog/2020/01/deno-intro.html%E3%80%82\">http://www.ruanyifeng.com/blog/2020/01/deno-intro.html。</a></p>\n<ul>\n<li>\n<p>github\n<a href=\"https://github.com/denoland\">https://github.com/denoland</a></p>\n</li>\n<li>\n<p>官網\n<a href=\"https://deno.land/\">https://deno.land/</a></p>\n</li>\n</ul>\n</div>",
		"title": "Deno 已來，你來不來？",
		"last_reply_at": "2020-05-15T08:38:25.258Z",
		"good": false,
		"top": false,
		"reply_count": 2,
		"visit_count": 700,
		"create_at": "2020-05-14T17:48:15.869Z",
		"author": {
			"loginname": "jaylin1011",
			"avatar_url": "https://avatars2.githubusercontent.com/u/54040386?v=4&s=120"
		}
	}, {
		"id": "5e8e9c3064259617c49a5025",
		"author_id": "5c81f15090c14711cc8cb87e",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><p>教程讲了Nodejs的基础以及一些新特性、以及如何用nodejs封装一个类似于Express框架、还讲了Mongodb高级查询 聚合管道等内容</p>\n<p><strong>网盘链接</strong>： <a href=\"https://pan.baidu.com/s/1KmOwI3tKtMGwLXJhr5Om0w\">https://pan.baidu.com/s/1KmOwI3tKtMGwLXJhr5Om0w</a>      <strong>提取码</strong>：h87t</p>\n<p><strong>B站在线地址：</strong>  <a href=\"https://www.bilibili.com/video/av38925557/?p=1\">https://www.bilibili.com/video/av38925557/?p=1</a></p>\n<p>拿走不谢  新手帮助还是挺大的</p>\n</div>",
		"title": "2020录制的Nodejs+Mongodb+Koa2入门实战视频教程（44讲网盘免费下载-B站免费看）",
		"last_reply_at": "2020-05-15T07:46:03.525Z",
		"good": false,
		"top": false,
		"reply_count": 7,
		"visit_count": 4775,
		"create_at": "2020-04-09T03:53:20.003Z",
		"author": {
			"loginname": "phonegap100",
			"avatar_url": "https://avatars1.githubusercontent.com/u/5773766?v=4&s=120"
		}
	}, {
		"id": "5df828db76a67b5e0e4186e7",
		"author_id": "5c8b07957ce0df37324281f2",
		"tab": "ask",
		"content": "<div class=\"markdown-text\"><p>nestjs 微服务教程有没有</p>\n</div>",
		"title": "nestjs 微服务教程有没有",
		"last_reply_at": "2020-05-15T07:44:03.446Z",
		"good": false,
		"top": false,
		"reply_count": 15,
		"visit_count": 4799,
		"create_at": "2019-12-17T01:01:15.026Z",
		"author": {
			"loginname": "xuemeifenglin",
			"avatar_url": "https://avatars3.githubusercontent.com/u/48575523?v=4&s=120"
		}
	}, {
		"id": "56cef313a1658d484d7a3676",
		"author_id": "563f17d0b0cedafd38970462",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><p>在中国有很多特色的东西，防火长城阻碍了很多人浏览外界的机会，也成就了很多人，比如：一度很火的红杏。但是，这些服务，都不长久，慢慢都被和谐了。所以，掌握几个免费的Vpn是必要的。这里，介绍我常用的几个，希望对大家有帮助：</p>\n<h2>（1）Lantern</h2>\n<p>这是一个免费、简单、开源，基于P2P网络，去中心化的应用程序。它的目标就是帮助你随时随地快速、可靠、安全地访问互联网。支持移动android等。</p>\n<p>源码在这里：<a href=\"https://github.com/getlantern/lantern\">https://github.com/getlantern/lantern</a></p>\n<p>官方网站https://getlantern.org/</p>\n<p>直接下载安装即可。</p>\n<h2>（2）Bitnet</h2>\n<p>中文名叫微币，原来叫vpncoin，是一种加密货币，当然也是去中心化的应用了。一开始也是以提供科学上网vpn起家的，你可以在线挣取其他节点的上网时间。</p>\n<p>官网：<a href=\"http://www.bitnet.cc/\">http://www.bitnet.cc/</a></p>\n<h2>（3）自己快速搭建</h2>\n<p>亚马逊，提供了一个1年期的免费主机，配置也足够用了。在 ec2虚拟机上，安装一个Ubuntu服务器。使用下面的一条命令，打造一个ssh代理：</p>\n<pre class=\"prettyprint\"><code>sudo ssh -v -i ~&#x2F;.ssh&#x2F;Your.pem ubuntu@[EC2公网IP] -D 8888 -C\n</code></pre><p>Your.pem是您的密钥，aws必须的。EC2公网IP，aws会自动分配。8888为代理端口号，代理服务器是<code>localhost</code>。然后，在浏览器的代理设置里，就可以直接用了。</p>\n<p>喜欢加密货币的小盆友，可以联系我，微信：kubying</p>\n</div>",
		"title": "使用VPN翻Qiang，还用花钱吗？告诉你三种简单快捷的省钱方法。。。",
		"last_reply_at": "2020-05-15T07:01:26.723Z",
		"good": false,
		"top": false,
		"reply_count": 9,
		"visit_count": 27432,
		"create_at": "2016-02-25T12:26:59.486Z",
		"author": {
			"loginname": "imfly",
			"avatar_url": "https://avatars2.githubusercontent.com/u/12215508?v=4&s=120"
		}
	}, {
		"id": "5ebba355e785ec40b04fc1de",
		"author_id": "5eb37c9ae785ec40b04faeae",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><p>由于原项目的前端使用的是<strong>ejs</strong>，没有用到三大框架。考虑到nodejs开发者好多是从前端转过来或同时具备前端开发的能力，</p>\n<p>所以笔者计划用<strong>react</strong>重构前端界面，考虑到社区需要<strong>服务端渲染</strong>和<strong>管理全局数据</strong>，所以使用了nextjs和redux。</p>\n<p>原项目采用的技术栈：Nodejs, Express, Mongodb, Redis, <strong>ejs</strong>和less，典型的MVC架构</p>\n<p>本仓库采用的技术栈：Nodejs, Express, Mongodb, Redis, <strong>React</strong>, <strong>Redux</strong>, <strong>nextjs</strong>, <strong>webpack</strong>和less</p>\n<p>由于时间和精力，本仓库只React化了社区主页和所有导航导航页面，可以使用github快捷登录，但不能注册邮箱登录。</p>\n<p>本仓库仅用作技术交流，有兴趣的同学，欢迎加入一起happy哈。</p>\n<p>react项目地址：<a href=\"https://github.com/zhoushoujian/Nodeclub-React\">Nodeclub - React</a></p>\n<p>体验地址： <a href=\"http://192.144.213.72:3333/\">http://192.144.213.72:3333/</a></p>\n<p>最后：体验地址里引用了https://cnodejs.org/一些帖子，如有侵权，欢迎联系笔者。此项目暂不属于cnode.org官方项目，正在努力争取。</p>\n</div>",
		"title": "Cnode社区的react版本已在完善中，欢迎志同道合的同学加入",
		"last_reply_at": "2020-05-15T02:10:38.778Z",
		"good": false,
		"top": false,
		"reply_count": 2,
		"visit_count": 745,
		"create_at": "2020-05-13T07:35:49.876Z",
		"author": {
			"loginname": "zhoushoujian",
			"avatar_url": "https://avatars2.githubusercontent.com/u/36908047?v=4&s=120"
		}
	}, {
		"id": "5e7dad2264259617c49a32f4",
		"author_id": "5e61fec023bc9e20b4e326d3",
		"tab": "ask",
		"content": "<div class=\"markdown-text\"><p>nodejs与node这是两个东西吗？\n我用nodejs -v查询版本号，与node -v 查询，两个版本号不一样。 若是两个东西，能详细解释下两者什么关系，或区别吗？</p>\n<p><img src=\"//static.cnodejs.org/FkP9JTFgjip-Oa_eOtRagj5mWegj\" alt=\"eg3.jpg\"></p>\n</div>",
		"title": "菜鸟傻傻的提问，关于 nodejs与node",
		"last_reply_at": "2020-05-15T02:08:45.574Z",
		"good": false,
		"top": false,
		"reply_count": 7,
		"visit_count": 3355,
		"create_at": "2020-03-27T07:37:06.877Z",
		"author": {
			"loginname": "lupy0925",
			"avatar_url": "https://avatars1.githubusercontent.com/u/61857802?v=4&s=120"
		}
	}, {
		"id": "5ebddbe7e785ec40b04fcdd9",
		"author_id": "59bcd46ad7cbefc51196443f",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><p>各位好，近期在用 <a href=\"https://gn.googlesource.com/gn/+/master/docs/reference.md\">gn</a> 的帮助指令时，感觉它的帮助指令很是方便，于是突发奇想，node.js 是不是也可以从命令行中直接查看官方 api，我在 npm 仓库中找了一圈，发现没有类似的依赖，于是动手写了一个 <a href=\"https://github.com/zhangwinning/show-node-api\">show-node-api</a>。文档内容的显示方式是采用 linux 的 less 模式，这里是借鉴的 liunx 的 man 指令。</p>\n<p>现在支持的平台有 mac OS/liunx，windows 暂时没测过。</p>\n<p>个人觉的这个小工具可以方便那些经常在 linux 或者终端编程的人，因为习惯了终端，大家都希望在终端中解决一切事情(比如俺👀)，因为切换界面也是时间的浪费嘛。然而我也相信这个小工具也是有缺陷的，如果大家有什么想法，希望大家踊跃提 issue/pr/star，最后撒花结束。</p>\n<p>本项目后序 todo</p>\n<ul>\n<li>因为不同 node.js 版本的文档是有些许差异的，现在是写死保存到仓库里，后面会根据不同的 node 版本拉取远程不同的文档。</li>\n<li>项目中提到的 todo/测试用例还有待优化。</li>\n</ul>\n<p>演示demo:</p>\n<p><img src=\"https://wx4.sinaimg.cn/large/e8616f3dly1gessfqxgzqg20ci0a8b2a.gif\" alt=\"demo\"></p>\n</div>",
		"title": "命令行查看 node.js  官方文档的工具",
		"last_reply_at": "2020-05-15T01:42:32.884Z",
		"good": false,
		"top": false,
		"reply_count": 4,
		"visit_count": 325,
		"create_at": "2020-05-15T00:01:43.160Z",
		"author": {
			"loginname": "WenNingZhang",
			"avatar_url": "https://avatars1.githubusercontent.com/u/23034399?v=4&s=120"
		}
	}, {
		"id": "53b93bab1b009b31532ef934",
		"author_id": "50f7a0a9df9e9fcc5889a1b0",
		"content": "<div class=\"markdown-text\"><p>要安全的, 要用gmail.\n封这么厉害…</p>\n</div>",
		"title": "有靠谱的VPN推荐吗?",
		"last_reply_at": "2020-05-14T16:57:19.744Z",
		"good": false,
		"top": false,
		"reply_count": 61,
		"visit_count": 141822,
		"create_at": "2014-07-06T12:06:03.451Z",
		"author": {
			"loginname": "ronincn",
			"avatar_url": "//gravatar.com/avatar/0582e15ee13a3fef9d78dac6f0c71575?size=48"
		}
	}, {
		"id": "5ebbba032d0afc4087f54ff3",
		"author_id": "5e53bd031225c9423dcdad83",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><p><a href=\"https://zh.wikipedia.org/zh-hans/OpenVPN\">OpenVPN是开源商业软件</a>，它实施虚拟专用网（VPN）技术，以在路由或桥接配置以及远程访问设施中创建安全的点对点或站点对站点连接。 它使用定制安全协议，该协议利用SSL / TLS进行密钥交换。 它能够遍历网络地址转换器（NAT）和防火墙。</p>\n<p>OpenVPN允许对等方使用预共享的密钥，证书或用户名/密码来相互认证。 在多客户端服务器配置中使用时，它允许服务器使用签名和证书颁发机构为每个客户端发布身份验证证书。 它广泛使用OpenSSL加密库以及TLS协议，并且包含许多安全性和控制功能。</p>\n<p><strong>加密:</strong>\n它使用OpenSSL库软件包对所有类型的数据进行加密。 这一天是私人的还是数据传输的。 它允许OpenVPN使用OpenSSL软件包中提供的所有密码。</p>\n<p><strong>认证方式:</strong>\nOpenVPN有几种相互认证对方的方法。 OpenVPN提供预共享密钥，基于证书的身份验证和基于用户名/密码的身份验证。 预共享密钥最简单，而基于证书的密钥最健壮且功能丰富。</p>\n<p><strong>联网:</strong>\nOpenISP使用通用网络协议（TCP和UDP）使其成为IPsec的理想替代方案，在这种情况下，ISP可能会阻止特定的VPN协议，以迫使用户订阅价格更高的“业务级”服务层。</p>\n<p><strong>OpenVPN和操作系统：</strong>\nOpenvpn与市场上所有可用的操作系统兼容，您要做的就是下载运行的库。 然后与<a href=\"https://www.purevpn.com/hk/what-is-vpn/protocols/openvpn\">支持OpenVPN协调的服务器建立连接</a>。</p>\n<p><strong>安全性：</strong>\nOpenVPN提供了各种内部安全功能。 它通过OpenSSL库具有高达256位的加密，尽管某些服务提供商可能会提供较低的速率，从而有效地为消费者提供了一些最快的VPN。</p>\n</div>",
		"title": "OpenVPN和它的主要功能",
		"last_reply_at": "2020-05-14T16:54:28.590Z",
		"good": false,
		"top": false,
		"reply_count": 1,
		"visit_count": 869,
		"create_at": "2020-05-13T09:12:35.901Z",
		"author": {
			"loginname": "Jamieccv1",
			"avatar_url": "https://avatars1.githubusercontent.com/u/61415557?v=4&s=120"
		}
	}, {
		"id": "5ebd76592d0afc4087f55bda",
		"author_id": "5ebd758a2d0afc4087f55bd6",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><p>自己搭建的VPN，欢迎大家测试给意见，只供研究使用，谢谢</p>\n<p>电报频道可以下载vpn，电报地址如下：\n<a href=\"https://t.me/FreeVPNSS\">https://t.me/FreeVPNSS</a>\n目前我做了1.0.1版本</p>\n<p>采用Trojan技术\n我自己测试下载速度600-1M左右\n看YT一点不卡\n我把服务器放在新加坡的，所以打开app，会有白屏3秒时间，这个问题有大神能解决吗？\n真心技术男，求技术大神指教！</p>\n</div>",
		"title": "自己搭建的VPN，欢迎大家测试给意见，只供研究使用，谢谢",
		"last_reply_at": "2020-05-14T16:48:25.832Z",
		"good": false,
		"top": false,
		"reply_count": 0,
		"visit_count": 565,
		"create_at": "2020-05-14T16:48:25.832Z",
		"author": {
			"loginname": "duonianyihou1",
			"avatar_url": "https://avatars1.githubusercontent.com/u/65359071?v=4&s=120"
		}
	}, {
		"id": "5eae30f5fd11584365d2ce83",
		"author_id": "5bfa5d31be1b120abac5c973",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><p>基于D3.js + React 实现的数据可视化构建工具 在线预览地址\n<a href=\"http://47.107.66.252:8080/#/\"> http://47.107.66.252:8080/#/</a></p>\n<p>源码地址\n<a href=\"https://github.com/CBDxin/chart\">https://github.com/CBDxin/chart</a></p>\n<p>启动</p>\n<pre class=\"prettyprint\"><code>npm run start\n</code></pre><p>声明式配置语法</p>\n<pre class=\"prettyprint\"><code>{\n  height: 700,\n  width: &quot;100%&quot;,\n  charts:[\n    {\n      type:&quot;Area&quot;,\n      name:&quot;区域图&quot;,\n      key:&quot;Area&quot;\n    }\n  ],\n  components:[\n    {\n      type:&quot;xAxis&quot;,\n      position:&quot;bottom&quot;\n    },\n    {\n      type:&quot;yAxis&quot;,\n      position:&quot;left&quot;\n    }\n  ],\n  dataSet:{\n    domain:[1,2,3,4,5,6],\n    range:{\n      Area:[300,500,400,20,600,900]\n    }\n  }\n}\n</code></pre><p>可视化图表：</p>\n<ol>\n<li>\n<p>Area,\n<img src=\"https://upload-images.jianshu.io/upload_images/13434832-d278ce72fe50c2fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Area.png\"></p>\n</li>\n<li>\n<p>AreaStack\n<img src=\"https://upload-images.jianshu.io/upload_images/13434832-77493987a119e637.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"AreaStack.png\"></p>\n</li>\n<li>\n<p>Bar\n<img src=\"https://upload-images.jianshu.io/upload_images/13434832-435c06e6a82eed46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Bar.png\"></p>\n</li>\n<li>\n<p>BarGroup\n<img src=\"https://upload-images.jianshu.io/upload_images/13434832-5a176777f802fe2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"BarGroup.png\"></p>\n</li>\n<li>\n<p>BarStack\n<img src=\"https://upload-images.jianshu.io/upload_images/13434832-84b0d9416f724f19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"BarStack.png\"></p>\n</li>\n<li>\n<p>Geo\n<img src=\"https://upload-images.jianshu.io/upload_images/13434832-df4aff585d2f57a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Geo.png\"></p>\n</li>\n<li>\n<p>Line\n<img src=\"https://upload-images.jianshu.io/upload_images/13434832-cc0bbbeb4f54f326.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Line.png\"></p>\n</li>\n<li>\n<p>Pie\n<img src=\"https://upload-images.jianshu.io/upload_images/13434832-cf3d07406599e635.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Pie.png\"></p>\n</li>\n<li>\n<p>PolarScatter\n<img src=\"https://upload-images.jianshu.io/upload_images/13434832-62eca8c4ccd6a9df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"PolarScatter.png\"></p>\n</li>\n<li>\n<p>Radar\n<img src=\"https://upload-images.jianshu.io/upload_images/13434832-f475747f22870e74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Radar.png\"></p>\n</li>\n<li>\n<p>Scatter\n<img src=\"https://upload-images.jianshu.io/upload_images/13434832-9ec6a57d1ab586f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Scatter.png\"></p>\n</li>\n<li>\n<p>TreeMap\n<img src=\"https://upload-images.jianshu.io/upload_images/13434832-5f328191de64b780.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"TreeMap.png\"></p>\n</li>\n<li>\n<p>Tree\n<img src=\"https://upload-images.jianshu.io/upload_images/13434832-9748d2f462a9ba38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Tree.png\"></p>\n</li>\n</ol>\n<p>可视化组件：</p>\n<ol>\n<li>Scale</li>\n<li>Axis</li>\n<li>Tooltip</li>\n<li>Brush</li>\n<li>Grid</li>\n<li>Legend</li>\n<li>LinearGradient</li>\n<li>VisualMap</li>\n</ol>\n</div>",
		"title": "利用D3与React打造一套可视化构建框架",
		"last_reply_at": "2020-05-14T11:50:44.256Z",
		"good": false,
		"top": false,
		"reply_count": 3,
		"visit_count": 2439,
		"create_at": "2020-05-03T02:48:21.475Z",
		"author": {
			"loginname": "CBDxin",
			"avatar_url": "https://avatars1.githubusercontent.com/u/42411100?v=4&s=120"
		}
	}, {
		"id": "583191e267db500b79c100ed",
		"author_id": "582468cc8e0f8bb038f38b6e",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><p><strong>前言</strong></p>\n<p><strong>此教主要程针对已经能够科学上网,但不想继续花费高额vpn费用的用户.</strong>\n<strong>但是</strong>如果还不会科学上网,也没有关系.请购买<strong>体验套餐</strong>.然后访问gfw.press官网,注册账号.实现<strong>永久免费服务</strong>.</p>\n<blockquote>\n<ul>\n<li>GFW.Press将方法配合SwitchOmega / SocksCap64两款软件实现<strong>一键fq</strong>.*</li>\n</ul>\n</blockquote>\n<hr>\n<p>=======================================完美的分割线======================================</p>\n<h2><strong>1. GFW.Press</strong>\n在这里首先感谢赵国劣绅 石斑鱼大爷  <a href=\"https://github.com/chinashiyu\">github源码</a>\n<strong>教程开始</strong>\n<em>首先要登录官网注册账号,能翻樯的直接登录gfw.press,不能翻樯的先购买体验服务</em>\n** <a href=\"https://my.shadowsocksr.com/cart.php?gid=7\">体验套餐购买地址</a>**\n** <a href=\"https://my.shadowsocksr.com/knowledgebase.php?action=displayarticle&amp;id=26\">购买完毕使用教程</a>**</h2>\n<p>现在已经大家都能够翻樯了.接下来就要使用免费服务了.</p>\n<ul>\n<li>\n<p>1.登录gfw.press官网**(这里需要翻樯)**</p>\n</li>\n<li>\n<p>2.点击注册</p>\n</li>\n<li>\n<p>3.注册成功后点击登录,你将会看到节点信息\n<img src=\"//static.cnodejs.org/FjRR4JHK1lc6SzxNtnAc8HmumyOH\" alt=\"Press用户界面.PNG\"></p>\n</li>\n<li>\n<p>4.下载gfw.press软件. 由于下载经常会断开.我已经下好了.      <a href=\"http://pan.baidu.com/s/1kVlW7np\">百度云链接</a>密码:hffg</p>\n</li>\n<li>\n<p>5.安装完毕后双击打开,并安装gfw.press官网中提供的账号填入节点,端口以及密码.</p>\n</li>\n<li>\n<p>6.打开谷歌浏览器,搜索chrome网上应用店,打开并搜索插件switchomega,安装插件   <strong>(这里需要翻樯)</strong>\n<img src=\"//static.cnodejs.org/FjJmrA7AVIocymjZN_-SN2RgrPih\" alt=\"chrome网上应用店下载switchomega插件.png\"></p>\n</li>\n<li>\n<p>7.下载完毕后,你的谷歌浏览器右上角将多出一个小图标.单击选项按钮进入管理界面.\n<img src=\"//static.cnodejs.org/FvkjspPx9UswCmRl07ZUkxnqSJ8q\" alt=\"switchomega配置说明-1.png\"></p>\n</li>\n<li>\n<p>8.进入管理界面后,进行如下配置\n\t(1)新建情景模式\n<img src=\"//static.cnodejs.org/FkRw9vxJhAECricmXA4xbjG318x6\" alt=\"switchomega配置说明-2.png\">\n\t(2)填入路由信息\n<img src=\"//static.cnodejs.org/FqqxP52d_OWXfxc2BZMuHViObcsm\" alt=\"switchomega配置说明-3.png\"></p>\n</li>\n<li>\n<p>9.填完以后一定记得点击  <strong>应用选项</strong>  保存刚才的配置.然后关闭标签页即可.</p>\n</li>\n<li>\n<p>10.此时单击你右上角的switchomega插件将会多出一个GFW.press选项.\n<img src=\"//static.cnodejs.org/Fn1Px1sehKJoPP35CubVqFTTimxh\" alt=\"untitled1.png\">\n11.点击切换到GFW.Press模式下,恭喜你.可以永久免费翻樯了.\n12.如果你不确定自己有没有成功,那么登录ipip.net就能看到自己的ip地址了.\n<img src=\"//static.cnodejs.org/FtjJX7vhuCy1wx-KHyRddqsUOWRP\" alt=\"switchomega配置说明-5.png\"></p>\n</li>\n</ul>\n</div>",
		"title": "GFW.Press永久翻樯(免费)",
		"last_reply_at": "2020-05-14T10:28:01.721Z",
		"good": false,
		"top": false,
		"reply_count": 30,
		"visit_count": 126760,
		"create_at": "2016-11-20T12:06:58.395Z",
		"author": {
			"loginname": "yuxiaochi12345",
			"avatar_url": "https://avatars.githubusercontent.com/u/18710967?v=3&s=120"
		}
	}, {
		"id": "5ebcebf42d0afc4087f5554a",
		"author_id": "55afa32c9594740e76ab3e2e",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><p><a href=\"https://deno.land/v1\">https://deno.land/v1</a></p>\n</div>",
		"title": "Deno 1.0",
		"last_reply_at": "2020-05-14T10:01:41.875Z",
		"good": false,
		"top": false,
		"reply_count": 1,
		"visit_count": 452,
		"create_at": "2020-05-14T06:57:56.015Z",
		"author": {
			"loginname": "dou4cc",
			"avatar_url": "https://avatars2.githubusercontent.com/u/7764678?v=4&s=120"
		}
	}, {
		"id": "5514b132e26684ed7ff21bf2",
		"author_id": "53fdd8502243147e7857b2bb",
		"tab": "ask",
		"content": "<div class=\"markdown-text\"><p>发现一堆网站上不了\n你们都用什么 VPN? 推荐下\n以前到 V2EX 查，发现 V2EX 也上不了\n免费的付费的都行</p>\n</div>",
		"title": "你用什么 VPN?",
		"last_reply_at": "2020-05-14T05:44:13.062Z",
		"good": false,
		"top": false,
		"reply_count": 49,
		"visit_count": 31406,
		"create_at": "2015-03-27T01:24:02.838Z",
		"author": {
			"loginname": "russj",
			"avatar_url": "https://avatars2.githubusercontent.com/u/2281763?v=4&s=120"
		}
	}, {
		"id": "5ebcc0952d0afc4087f551f7",
		"author_id": "5ebcbf92e785ec40b04fc411",
		"tab": "ask",
		"content": "<div class=\"markdown-text\"><p><img src=\"//static.cnodejs.org/FrgqLoaWjFpBi7e9QpHo_umZLwD1\" alt=\"无标题.png\"></p>\n<p>在html里面运行是没有任何问题的</p>\n<p><img src=\"//static.cnodejs.org/Fsx_VJXqDyT8IotJEPVPHJ030N2V\" alt=\"image.png\"></p>\n</div>",
		"title": "在vue文件中注册组件使用elementui 标签报 [Vue warn]: Injection \"elForm\" not found",
		"last_reply_at": "2020-05-14T03:52:53.356Z",
		"good": false,
		"top": false,
		"reply_count": 0,
		"visit_count": 959,
		"create_at": "2020-05-14T03:52:53.356Z",
		"author": {
			"loginname": "apple626",
			"avatar_url": "https://avatars2.githubusercontent.com/u/65283908?v=4&s=120"
		}
	}, {
		"id": "5ebcaaa32d0afc4087f5516a",
		"author_id": "59a4d33fd97b7e2308242831",
		"tab": "ask",
		"content": "<div class=\"markdown-text\"><p>公司的一个老项目昨天晚上日志里，出现大量的错误：\n\tError: request aborted\nat IncomingMessage.onAborted (/home/www/web/node_modules/co-body/node_modules/raw-body/index.js:269:10)\nat emitNone (events.js:86:13)\nat IncomingMessage.emit (events.js:185:7)\nat abortIncoming (_http_server.js:281:11)\nat Socket.serverSocketCloseListener (_http_server.js:294:5)\nat emitOne (events.js:101:20)\nat Socket.emit (events.js:188:7)\nat TCP._handle.close [as _onclose] (net.js:497:12)\n请问有大佬能给指点一下可能是哪里出现的问题吗？</p>\n</div>",
		"title": "nodejs 后端 遇到 request aborted",
		"last_reply_at": "2020-05-14T03:05:20.793Z",
		"good": false,
		"top": false,
		"reply_count": 2,
		"visit_count": 384,
		"create_at": "2020-05-14T02:19:15.433Z",
		"author": {
			"loginname": "312xiaoguai",
			"avatar_url": "https://avatars0.githubusercontent.com/u/17775548?v=4&s=120"
		}
	}, {
		"id": "5eb8fc4e2d0afc4087f54442",
		"author_id": "5875bd3d06fa6e2a4e4f730b",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><p>起源是在写webscoket服务的时候，发现开发工具偶尔报<code>Maximum call stack size exceeded</code>的问题。由于当时没时间，就草草把<a href=\"https://github.com/zy445566/before-server/commit/bafa7f8a241510b322add1394fc48bddf3a30fbc\">BUG</a>修复了，并未深究原因。现在复盘工作的时候，又想起这个问题，于是再把这个问题拿出来研究。</p>\n<p>出错代码大概是如下：</p>\n<pre class=\"prettyprint language-js\"><code>new Array().push(...Buffer.allocUnsafe(2**17))\n</code></pre><p>一开始看到超出调用栈以为是Buffer的迭代器递归出现了问题，但事实并不是这样。</p>\n<h1>排查出错原因</h1>\n<p>由于出错代码是这样的:</p>\n<pre class=\"prettyprint language-js\"><code>&#x2F;*\n* 而且存在临界点，不同机器略有差异\n* 本人的机器大于2**17就必报\n*&#x2F;\nnew Array().push(...Buffer.allocUnsafe(2**17))\n</code></pre><p>当时认为是Buffer的迭代器问题，所以就尝试使用普通数组</p>\n<pre class=\"prettyprint language-js\"><code>&#x2F;*\n* 这段代码在浏览器也报错\n* 所以排除nodejs原因，应该是V8造成的\n*&#x2F;\nnew Array().push(...new Array(2**17).fill(0xff))\n</code></pre><p>发现普通数组也存在类似问题，接下来就是排除迭代器</p>\n<pre class=\"prettyprint language-js\"><code>[...new Array(2**17).fill(0xff)]\n</code></pre><p>发现迭代居然<code>没有异常</code>，难道是push方法？那就换个方法试试</p>\n<pre class=\"prettyprint language-js\"><code>console.log(...new Array(2**17).fill(0xff))\n</code></pre><p>居然log也报错,那真相只有一个，那就是<code>参数超载</code>了</p>\n<h1>那为什么会报超过最大调用堆栈大小，而不是其它错误？</h1>\n<p>大家都知道，函数再调用函数的时候，是通过存储在调用栈中来保持执行顺序的，而栈是有一定大小，比如递归上数百万次后也会出现爆栈。</p>\n<p>那么是否真的是因为栈不够用了？还是说参数对调用栈也存在一些影响？</p>\n<ol>\n<li>接下来我们就来逐一排查。首先确定是否是真的因为栈不够用了</li>\n</ol>\n<pre class=\"prettyprint language-sh\"><code># 通过调整栈大小，来判断是否是栈耗尽了，stack-size的单位是KB，默认是984\nnode --stack-size=2048 -e &quot;new Array().push(...Buffer.allocUnsafe(2**17))&quot;\n</code></pre><p>发现果然运行正常，所以可以确定是栈耗尽了</p>\n<ol>\n<li>排查参数的数量对栈的影响</li>\n</ol>\n<pre class=\"prettyprint language-js\"><code>function recursionDepth(paramLen) {\n    let deepth = 0;\n    function f(...paramList) {\n        deepth++;\n        Math.random() + f(...paramList); &#x2F;&#x2F; 防止尾递归优化\n    }\n    try{\n        f(...Buffer.allocUnsafe(paramLen))\n    } catch (err) {\n        console.log(&#96;当参数长度为${paramLen}，最大深度则为：${deepth}&#96;)\n    }\n}\n\nrecursionDepth(2**4)\nrecursionDepth(2**8)\nrecursionDepth(2**12)\nrecursionDepth(2**16)\nrecursionDepth(2**20)\n</code></pre><p>输出结果:</p>\n<pre class=\"prettyprint language-sh\"><code>当参数长度为16，最大深度则为：3489\n当参数长度为256，最大深度则为：455\n当参数长度为4096，最大深度则为：30\n当参数长度为65536，最大深度则为：1\n当参数长度为1048576，最大深度则为：0\n</code></pre><p>所以由此确定参数的数量也是需要暂用调用栈的空间，而当参数长度达到足够长，即使1帧也可以压垮整个调用栈，超出调用栈空间。</p>\n</div>",
		"title": "警惕JS数组解构转参数导致爆栈问题",
		"last_reply_at": "2020-05-13T13:26:28.298Z",
		"good": false,
		"top": false,
		"reply_count": 8,
		"visit_count": 955,
		"create_at": "2020-05-11T07:18:38.450Z",
		"author": {
			"loginname": "zy445566",
			"avatar_url": "https://avatars2.githubusercontent.com/u/14976489?v=4&s=120"
		}
	}, {
		"id": "5eba97f6e785ec40b04fbd50",
		"author_id": "5b5d6fef58db3ccf66a4501e",
		"tab": "ask",
		"content": "<div class=\"markdown-text\"><h2>请问我下面的做法是不是最佳实践？</h2>\n<p>我的观点：<strong>data中尽量只存放被“动态响应的数据“</strong>，<strong>其它数据放在外部</strong>。</p>\n<ol>\n<li>“动态响应的数据“: 如：视图模板中的数据、computed中的数据。</li>\n<li>“其它的数据”：如,临时变量之类的尽量放在”外部“</li>\n</ol>\n<h3>代码如下</h3>\n<pre class=\"prettyprint language-vue\"><code>import ··· from ···;\n&#x2F;&#x2F;下面是其它数据存放的位置\nlet ···；\nlet ···；\nexport default {\nname:&quot;componentA&quot;,\ndata() {\n    return {\n      ······&#x2F;&#x2F;这里存放 视图模板、computed中 依赖的数据\n    }\n  }\n}\n</code></pre></div>",
		"title": "请教vue的最佳实践----什么数据最应该放在data里面----“尽量减少data中的数据”",
		"last_reply_at": "2020-05-13T12:50:04.646Z",
		"good": false,
		"top": false,
		"reply_count": 3,
		"visit_count": 704,
		"create_at": "2020-05-12T12:35:02.637Z",
		"author": {
			"loginname": "ailuhaosi",
			"avatar_url": "https://avatars3.githubusercontent.com/u/30113164?v=4&s=120"
		}
	}, {
		"id": "5ea59dcb0275394e768835f0",
		"author_id": "5ab852d6320bb09d69e231f1",
		"tab": "ask",
		"content": "<div class=\"markdown-text\"><p>即便使用await,监听代码和主程序代码也是异步的,现在有个需求是捕捉alert提示,如果监听到alert,就返回alert信息,否则返回    success,一开始是如下设计:</p>\n<p><img src=\"//static.cnodejs.org/FjvsX0VhqMFIuafLeqx89grPl_vs\" alt=\"222.png\"></p>\n<p>这样不行,因为监测到alert信息后,当执行监听内返回代码的时候,报出错误 Cannot set headers after they are sent to the client,因为上面的return已经先返回了,麻烦大神帮忙看看,这种情况要怎么设计才能实现需求啊?自己折腾好久,也还是实现不了需求!!!~~~</p>\n</div>",
		"title": "请教一个监听的问题!",
		"last_reply_at": "2020-05-13T12:36:41.326Z",
		"good": false,
		"top": false,
		"reply_count": 9,
		"visit_count": 2247,
		"create_at": "2020-04-26T14:42:19.572Z",
		"author": {
			"loginname": "iori2882",
			"avatar_url": "https://avatars3.githubusercontent.com/u/1480587?v=4&s=120"
		}
	}, {
		"id": "5ebb9dd42d0afc4087f54f47",
		"author_id": "5bf3cec8e6481c5709f5d871",
		"tab": "ask",
		"content": "<div class=\"markdown-text\"><p>pm2.json文件配置{\n“apps”:{\n“name”:“nodeTest”,\n“interpreter”:&quot;./node_modules/.bin/ts-node&quot;,\n“cwd”:&quot;./&quot;,\n“script”:&quot;./app.ts&quot;,\n\t\t  “output”: “./output.log”,\n“error”: “./error.log”,\n\t\t}\n}\npm2 start pm2.json输出error.log文件报错</p>\n</div>",
		"title": "请问ts-node项目，如和用pm2来管理。",
		"last_reply_at": "2020-05-13T10:21:59.768Z",
		"good": false,
		"top": false,
		"reply_count": 3,
		"visit_count": 483,
		"create_at": "2020-05-13T07:12:20.045Z",
		"author": {
			"loginname": "tzbcf",
			"avatar_url": "https://avatars1.githubusercontent.com/u/25059314?v=4&s=120"
		}
	}, {
		"id": "5ebb8f922d0afc4087f54e86",
		"author_id": "57ec7fc3ea2fa420446d43cc",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><blockquote>\n<p>🦕 长期更新的《Deno 钻研之术》！循序渐进学 Deno &amp; 先易后难补 Node &amp; 面向未来的 Deno Web 应用开发。</p>\n</blockquote>\n<p>写作时间 10h+，第一篇已经发布了在 Github 和其它各大写作网站了，晚上大家闲了更新到公众号上群发蹭流量。</p>\n<p>第一篇的名字《Deno 钻研之术：(1) Hello, 从多样化安装到简单实战》。</p>\n<p>PS：我也是纯小白，没有业界大佬聊 Deno 那么弹指挥间深入浅出，所以写的很通俗…</p>\n<p>Github 地址：<a href=\"https://github.com/hylerrix/deno-tutorial\">https://github.com/hylerrix/deno-tutorial</a></p>\n<p><img src=\"//static.cnodejs.org/FqUN_Ejtz6RB2Sy6-M0ybjk7ZakA\" alt=\"deno-background.png\"></p>\n<p>同时感谢大家的 Star，我的 Awesome Deno Cn 仓库今天已经 50+ Star 了。</p>\n<p>目前规划的章节目录如下。</p>\n<ul>\n<li>基础篇：循序渐进学 Deno 基础知识；</li>\n<li>Node 篇：先易后难补 Node 知识，探索与 Deno 的异与同；</li>\n<li>Rust 篇：探索 Deno 底层有关 Rust 的更多知识；</li>\n<li>前端篇：探索 Deno Web 前端应用开发的方式；</li>\n<li>后端篇：探索 Deno Web 后端应用开发的方式；</li>\n<li>架构篇：深入到 Deno 底层读 v8，学架构。</li>\n</ul>\n<p>一起来玩鸭。</p>\n</div>",
		"title": "开始写电子书《Deno 钻研之术》，循序渐进学 Deno，由浅入深补 Node :)",
		"last_reply_at": "2020-05-13T10:17:41.522Z",
		"good": false,
		"top": false,
		"reply_count": 2,
		"visit_count": 657,
		"create_at": "2020-05-13T06:11:30.881Z",
		"author": {
			"loginname": "icorvoh",
			"avatar_url": "https://avatars1.githubusercontent.com/u/19285461?v=4&s=120"
		}
	}, {
		"id": "5e86cfbc64259617c49a43c2",
		"author_id": "59a50205bc6d953708128944",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><ol>\n<li>杭州A公司，boss上自己面找的，政企服务的，远程笔试没过，认栽，教育同学，多刷题。再次感谢内推的朋友</li>\n<li>上海B公司，boss上面对方找的，不清楚具体做哪块的，上来先两个Promise开胃，卒，教育同学，多刷题，不然后面都没机会聊。再次感谢内推的朋友</li>\n<li>上海Find,    boss上面找的，技术太忙为理由发了个在线编程题，简单搞定，后来回复说得分为0，行，可能没按照hackerrank上面的规范来吧，大哥这是国内，hackerrank是求职国外用的多一点好吧，逼格太高告辞打搅了。就怕说英文要求高，一入职全中文。</li>\n<li>上海达观，  boss上面找的，一个滑动窗口的题目，还有一个排序的题轻松拿下，人事反馈全错，打搅了告辞。</li>\n<li>上海PPIO，不太记得题目了，属于抖机灵的题目，还有处理日志脚本，不清楚可能我是一个假的node开发</li>\n<li>上海知言，没啥技术含量，看了下看准网评论，拖欠薪资，终面CEO挂了，很自信的一位大叔，聊天像是审问，就差素质三连了，和我不太对味。</li>\n<li>上海掌门一对一，对方要求熟悉c++插件以及eletron，挂了正常</li>\n<li>杭州宇链科技有限公司，面试很水，聊不下去。</li>\n<li>上海搜书神器，面试没劲，都要睡着了。</li>\n<li>上海普华永道，对英文有点要求，终面估计待遇问题挂了，结果还没出来，虽然我排斥996，但是也要恰饭的啊。</li>\n<li>上海XX公司，技术和CEO都对味，最关键疫情不受影响。</li>\n</ol>\n<p>上个图片分享一波\n<img src=\"https://tva1.sinaimg.cn/large/00831rSTgy1gdgjbk4vmsj30oh0jmgx6.jpg\" alt=\"281585891598_.pic_hd\"></p>\n</div>",
		"title": "分享一波近期找工作的经历，尽量按着时间顺序来。",
		"last_reply_at": "2020-05-13T05:54:45.939Z",
		"good": false,
		"top": false,
		"reply_count": 22,
		"visit_count": 4010,
		"create_at": "2020-04-03T05:55:08.340Z",
		"author": {
			"loginname": "jxycbjhc",
			"avatar_url": "https://avatars0.githubusercontent.com/u/16661897?v=4&s=120"
		}
	}, {
		"id": "5eba6af92d0afc4087f5499e",
		"author_id": "56e0e2b78023c6146ec3fe91",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><p><a href=\"http://fenghuangyu.cn:9035/\">http://fenghuangyu.cn:9035/</a></p>\n<p>源码\n<a href=\"https://github.com/dangyanglim/go_cnode\">https://github.com/dangyanglim/go_cnode</a></p>\n<p><img src=\"//static.cnodejs.org/Fj3daI9uxv2-QVPEXMSmsCAIS1_z\" alt=\"22.jpeg\"></p>\n</div>",
		"title": "用golang语言仿写了cnode的后端",
		"last_reply_at": "2020-05-13T03:33:55.034Z",
		"good": false,
		"top": false,
		"reply_count": 3,
		"visit_count": 781,
		"create_at": "2020-05-12T09:23:05.305Z",
		"author": {
			"loginname": "dangyanglim",
			"avatar_url": "https://avatars2.githubusercontent.com/u/16640185?v=4&s=120"
		}
	}, {
		"id": "5ebb5594e785ec40b04fbee7",
		"author_id": "58bd2657de61e16b0a7717a5",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><blockquote>\n<p>我们研发开源了一款基于 Git 进行技术实战教程写作的工具，我们图雀社区的所有教程都是用这款工具写作而成，欢迎 <a href=\"https://github.com/tuture-dev/tuture\">Star</a> 哦</p>\n</blockquote>\n<blockquote>\n<p>如果你想快速了解如何使用，欢迎阅读我们的 <a href=\"https://www.yuque.com/tuture/product-manuals/wsv091\">教程文档哦</a></p>\n</blockquote>\n<p>在大多数工作中，我们都将使用 Git 作为团队协作开发的工具。</p>\n<p><strong>本文总结了图雀团队协作开发的流程与规范，仅供参考。最优的解决方案还是需要结合团队的实际情况，具体问题具体分析。</strong></p>\n<p>为了让大家能够非常清晰直观地了解协作开发的流程，大家在看的时候可以打开 Learn Git Branching 的<a href=\"https://learngitbranching.js.org/?NODEMO\">沙箱运行环境</a>来实践（可以直接输入提供的代码）。在左边的终端中输入命令，就会在右边看到相应的动画。其中左边的实线圆圈代表本地仓库，右边的虚线圆圈代表远程仓库，<code>*</code> 号指向的是当前分支，<code>o/master</code> 就是远程分支（ <code>o</code> 就相当于 <code>origin</code> ）。</p>\n<p><img src=\"https://cdn.learnku.com/uploads/images/202005/13/28209/gyA2XST6yf.png!large\" alt></p>\n<p><strong>由于 Learn Git Branching 为了演示和学习的方便对部分命令做了简化，我将指出在实际操作中应当输入的命令。</strong></p>\n<h2>基本流程</h2>\n<p>接下来将重点讲述以下两个流程：</p>\n<ul>\n<li>\n<p>贡献代码</p>\n</li>\n<li>\n<p>更新本地仓库</p>\n</li>\n</ul>\n<h3>贡献代码</h3>\n<p>接下来的流程描述了在接到开发任务后，如何为中心仓库贡献代码。</p>\n<h4>将仓库 clone 到本地</h4>\n<pre class=\"prettyprint language-bash\"><code>$ git clone\n</code></pre><blockquote>\n<p>实际命令应当提供 URI 参数，例如：</p>\n<pre class=\"prettyprint language-bash\"><code>$ git clone https:&#x2F;&#x2F;github.com&#x2F;dhucst&#x2F;cooperation.git\n</code></pre></blockquote>\n<h4>开启新分支</h4>\n<pre class=\"prettyprint language-bash\"><code>$ git checkout -b B1\n</code></pre><p>为了便于演示，我们将新分支命名为 <code>B1</code>。在实际开发中，新分支的命名应当遵循以下原则：</p>\n<ul>\n<li>\n<p>使用 kebab-case，例如 <code>new-branch</code> ，而不是 <code>new_branch</code> 或 <code>newBranch</code></p>\n</li>\n<li>\n<p>尽量能概括这个分支所要完成的任务</p>\n</li>\n<li>\n<p>如果是为了解决某个 Issue，在最后加上 Issue 的编号，例如 <code>fix-75</code></p>\n</li>\n</ul>\n<h4>编写代码并提交</h4>\n<pre class=\"prettyprint language-bash\"><code>$ git commit\n</code></pre><blockquote>\n<p>实际命令应当要先执行 <code>git add</code> 来将修改的文件添加到暂存区，例如：</p>\n<pre class=\"prettyprint language-bash\"><code>$ git add .\n$ git commit\n</code></pre></blockquote>\n<p>Commit Message (Log) 的书写是有比较严格的规范的，会在后文的 <strong>提交信息书写规范</strong> 中详细阐述。</p>\n<h5>推送分支</h5>\n<pre class=\"prettyprint language-bash\"><code>$ git push\n</code></pre><blockquote>\n<p>实际命令在<strong>第一次</strong> push 任何分支时，应当指定 remote 和分支名称：</p>\n<pre class=\"prettyprint language-bash\"><code>$ git push origin B1\n</code></pre></blockquote>\n<p>有时候我们的分支会在一夜之间“过时”。什么是过时的分支，我们该怎样处理？不要方，后面会讲到。</p>\n<h4>提交 Pull Request</h4>\n<blockquote>\n<p>这一步骤无需在 Learn Git Branching 中操作。</p>\n</blockquote>\n<p>将分支提交到远程仓库后，打开仓库的 GitHub 页面，应该会看到下面这样黄色的提示框：</p>\n<p><img src=\"https://cdn.learnku.com/uploads/images/202005/13/28209/NrMcD8uSbB.jpeg!large\" alt=\"image-20200429091859922\"></p>\n<p>然后点击 Compare &amp; pull request 按钮，即可进入到提交 Pull Request 页面。</p>\n<p><img src=\"https://cdn.learnku.com/uploads/images/202005/13/28209/HFWwnBkgg9.png!large\" alt></p>\n<p>填写 Pull Request 标题所遵循的原则与 Commit message 大致相似。在填写 Pull Request 的详细内容时，如果是为了解决某个或多个 Issue 时，可以使用 <code>Close(s)</code>, <code>Fix(es)</code> 或 <code>Resolve(s)</code> 关键词来关闭某个 Issue，例如 <code>Fix #75</code> 。</p>\n<p>点击 Create pull request 按钮后，即可完成本次 PR。如果经讨论后发现需要修改，则在本地仓库修改后直接 <code>git push</code> 继续提交即可。如果代码通过了评审，则会由项目管理者将此分支并入 master 中，本次贡献代码流程结束。</p>\n<h3>更新本地仓库</h3>\n<p>接下来的流程介绍了当团队其他成员贡献代码后，如何将远程仓库的更新同步到本地。</p>\n<p>如果你在使用 Learn Git Branching 边看边练，请输入以下命令：</p>\n<pre class=\"prettyprint language-bash\"><code>$ reset\n$ git clone\n</code></pre><h4>其他成员贡献代码</h4>\n<pre class=\"prettyprint language-bash\"><code>$ git fakeTeamwork 2\n</code></pre><blockquote>\n<p>实际没有这条 Git 命令 😂，是 Learn Git Branching 提供用于练习协作的。</p>\n</blockquote>\n<p>这时候你会发现远程的仓库有了本地没有的提交 <code>C2</code> 和 <code>C3</code> 。</p>\n<h4>拉取远程代码</h4>\n<p>我们先来看第一种比较简单的情况：</p>\n<p><img src=\"https://cdn.learnku.com/uploads/images/202005/13/28209/w4awsFbi8n.png!large\" alt></p>\n<p>这时候一眼就可以看出，只需把远程的 <code>C2</code> 和 <code>C3</code> 直接拉取过来接在本地的 <code>C1</code> 后面就可以了：</p>\n<pre class=\"prettyprint language-bash\"><code>$ git pull\n</code></pre><p>接着我们来看另一种比较棘手的情况：</p>\n<p><img src=\"https://cdn.learnku.com/uploads/images/202005/13/28209/5UYgjl4llu.png!large\" alt></p>\n<p>需要输入的命令如下：</p>\n<pre class=\"prettyprint language-bash\"><code>$ reset\n$ git clone\n$ git checkout -b B2\n$ git commit\n$ git fakeTeamwork 2\n</code></pre><p>对着图看，我们在 <code>B2</code> 分支上在开发某个新功能，这时候远程仓库已经更新到了 <code>C4</code>，很显然我们本地的 master 分支和 <code>B2</code> 分支都不是最新的了。这种情况很常见：几个小伙伴从同一个起点（在这里就是 <code>C1</code> ）各自开发新功能时，其他人先于我们提交。</p>\n<p>大多数情况下，请遵循这一条原则：<strong>只更新 master 分支。</strong></p>\n<blockquote>\n<p>这一原则对于并行开发并不适用，我们会在本知识库后续文档中讲解。</p>\n</blockquote>\n<pre class=\"prettyprint language-bash\"><code>$ git checkout master\n$ git pull\n</code></pre><p><img src=\"https://cdn.learnku.com/uploads/images/202005/13/28209/Yig2fQCLvt.png!large\" alt></p>\n<p>这时候，我们就会认为 <code>B2</code> 分支已经<strong>过时</strong>（outdated），因为它没有最新的 <code>C3</code> 和 <code>C4</code> 。但过时的分支并不意味着没有价值了，我们可以像前面所讲解的那样 push 到远程仓库：</p>\n<pre class=\"prettyprint language-bash\"><code>$ git checkout B2\n$ git push\n</code></pre><p>然后一样可以发起 Pull Request。GitHub 会提示你这条分支已经过时，你可以点击 Update Branch 按钮来更新这一条分支（通常由项目管理者来执行这一操作）。</p>\n<h3>小结</h3>\n<p>团队协作开发的模型只涉及两个核心流程：贡献代码和更新本地仓库。</p>\n<p><img src=\"https://cdn.learnku.com/uploads/images/202005/13/28209/zpoSCgreZC.png!large\" alt></p>\n<p>贡献代码的流程：</p>\n<pre class=\"prettyprint language-bash\"><code>$ git clone &lt;REPO_URI&gt;\n$ git checkout -b new-branch\n$ git add .\n$ git commit\n$ git push origin new-branch\n</code></pre><p>更新代码库的流程：</p>\n<pre class=\"prettyprint language-bash\"><code>$ git checkout master\n$ git pull\n</code></pre><h2>并行开发</h2>\n<p>一个项目的开发往往由多个开发任务组成，每个人都会负责承担一个或多个开发任务。最简单、最理想的情况当然是：同学 A 开始贡献代码，成功合并后所有人更新本地代码库；接着同学 B 开始贡献代码，合并后所有人更新本地代码库；然后是同学 C、D、E……</p>\n<p>不会有任何冲突，只需用到前面 <strong>基本流程</strong> 所介绍到的命令，多么轻松愉快！</p>\n<p>唯一的问题就是：这样的开发显然进度很慢，而且大家的时间安排也不够自由。这种<strong>串行开发</strong>的方式过于<strong>同步化</strong>，对于一个追求效率的团队来说是不能接受的。我们需要<strong>高度并行</strong>、<strong>完全异步</strong>的协作开发模式。</p>\n<p>接下来我们将描述三个典型的并行开发场景，其中的主角是大唐同学和煨鸽同学。</p>\n<h3>互不依赖且没有修改同一文件</h3>\n<p>例如有个着陆页开发的任务，大唐负责做“关于我们”页面，叫 about-us.html，煨鸽负责做“联系我们”页面，叫 contact.html，这两个文件相互独立的。</p>\n<p>这里我们假定大唐同学率先完成了任务并且已经合并到 <code>origin/master</code> 。这时候根据前一章 <strong>更新本地仓库</strong> 一节的说法，煨鸽正在工作的分支已经“过时”。这时候他只需要继续完成他的 contact.html 页面，然后提交就可以了。</p>\n<p>这是最简单的，也是最常见的情况（合理的任务划分应当如此）：相互独立的分支只需<strong>依次 push</strong>，不管是否过时。</p>\n<h3>存在依赖关系且没有修改同一文件</h3>\n<p>现在我们又假设大唐在开发着陆页的首页 index.html，煨鸽负责写着陆页的样式 index.css，很明显大唐的开发任务依赖煨鸽。经过一天的开发，大唐写完了主体部分 <code>C2</code>，煨鸽也写好了样式 <code>C3</code> 并且已经提交到远程仓库，现在他需要把煨鸽的样式表加进来，才能完成自己的开发任务。</p>\n<p><img src=\"https://cdn.learnku.com/uploads/images/202005/13/28209/ajq5mhwqUH.png!large\" alt></p>\n<p>在 <a href=\"https://learngitbranching.js.org/?NODEMO\">Learn Git Branching</a> 中输入以下代码：</p>\n<pre class=\"prettyprint language-bash\"><code>$ git clone\n$ git checkout -b html\n$ git commit\n$ git fakeTeamwork\n</code></pre><p>然后大唐使用 fetch 命令将远程的 C3 抓取下来（其实更严格的说法是将本地的 <code>o/master</code> 分支与远程的 <code>master</code> 同步）：</p>\n<pre class=\"prettyprint language-bash\"><code>$ git fetch\n</code></pre><p><img src=\"https://cdn.learnku.com/uploads/images/202005/13/28209/cPzlfpMrJL.png!large\" alt></p>\n<p>可以看到，html 文件的提交和 css 文件的提交在不同的分支上。html 是我们工作的分支（也是当前所在的分支），因此要把 <code>C3</code> 所在的 <code>o/master</code> 合并过来：</p>\n<pre class=\"prettyprint language-bash\"><code>$ git merge o&#x2F;master\n</code></pre><p><img src=\"https://cdn.learnku.com/uploads/images/202005/13/28209/090yu2tQzE.png!large\" alt></p>\n<p>这个形状看上去有点吓人！实际上，你只要真正理解分支的本质就会觉得非常好理解。</p>\n<p>分支不能简单地理解为一串 commit（虽然说在大多数情况下这种理解非常直观），而应该理解为指向某个 commit 的指针，而该 commit 的所有父节点都是该分支上的节点（commit）。因此在执行合并后，我们可以说 <code>C2</code> 和 <code>C3</code> 都已经在 <code>html</code> 分支上了。</p>\n<p>合并之后，我们再修改点东西，提交为 <code>C5</code> ，然后推送到远程仓库：</p>\n<pre class=\"prettyprint language-bash\"><code>$ git commit\n$ git push\n</code></pre><blockquote>\n<p>再次提醒真正的 push 命令在第一次推送某一分支时要加上远程仓库名称和分支名称，例如 <code>git push origin html</code> 。</p>\n</blockquote>\n<p>接下来就是提交 Pull Request、等待合并就可以了。</p>\n<h3>修改同一文件</h3>\n<p>首先声明这种情况非常少见，合理的任务划分会尽量避免这种情况出现。但是我们还是会讲解一下这种比较棘手的情况。由于 Learn Git Branching 没有提供冲突（conflict）的演示，所以我们需要自己在本地开仓库进行演示。</p>\n<blockquote>\n<p>为什么在本地开仓库练习就可以了，而不需要搭一个远程仓库吗？因为本小节的操作流程和命令跟上一节相比，除了增加了一个处理冲突的步骤，其余完全相同，因此我们关注的重点是怎么处理冲突。</p>\n</blockquote>\n<pre class=\"prettyprint language-bash\"><code>$ mkdir conflict-demo &amp;&amp; cd conflict-demo\n$ git init\n$ touch index.js\n$ git add .\n$ git commit -m &quot;Add index.js&quot;\n</code></pre><p>然后我们开启一个新分支 <code>add-func</code> :</p>\n<pre class=\"prettyprint language-bash\"><code>$ git checkout -b add-func\n</code></pre><p>在 index.js 中增添一个 <code>add</code> 函数：</p>\n<pre class=\"prettyprint language-javascript\"><code>function add(x, y) {\n  return x + y;\n}\n</code></pre><p>保存并提交：</p>\n<pre class=\"prettyprint language-bash\"><code>$ git add .\n$ git commit -m &quot;Implement add function&quot;\n</code></pre><p>然后我们切回主分支，并开启一个叫 <code>origin-master</code> 的分支（听这名字也知道，它模拟了远程的主分支）：</p>\n<pre class=\"prettyprint language-bash\"><code>$ git checkout master\n$ git checkout -b origin-master\n</code></pre><p>接着再在 index.js 中添加一个叫 <code>multiply</code> 的函数：</p>\n<pre class=\"prettyprint language-javascript\"><code>function multiply(x, y) {\n  return x * y;\n}\n</code></pre><p>好了，现在本地的 <code>add-func</code> 工作分支和“远程”的 <code>origin-master</code> 分支修改了同一文件 index.js，冲突一触即发！让我们来点燃这根导火索！</p>\n<blockquote>\n<p>其实你可以不停地把分支切来切去（轮流输入 <code>git checkout add-func</code> 和 <code>git checkout origin-master</code> ），你会看到 index.js 的内容会随之变来变去，版本控制系统的魅力可见一斑。</p>\n</blockquote>\n<pre class=\"prettyprint language-bash\"><code>$ git checkout add-func\n$ git merge origin-master\n</code></pre><p>我们会发现 Git 会输出你从未见过的信息：</p>\n<pre class=\"prettyprint\"><code>Auto-merging index.js\nCONFLICT (content): Merge conflict in index.js\nAutomatic merge failed; fix conflicts and then commit the result.\n</code></pre><p>划重点：index.js 在合并时发生冲突，请处理冲突然后提交。</p>\n<p>我们查看 index.js 的内容，发现了很神奇的东西（在命令行中用 cat 查看）：</p>\n<pre class=\"prettyprint\"><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nfunction add(x, y) {\n  return x + y;\n=======\nfunction multiply(x, y) {\n  return x * y;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; origin-master\n}\n</code></pre><p>如果我们用 VSCode 打开，会看到更炫酷的结果：</p>\n<p><img src=\"https://cdn.learnku.com/uploads/images/202005/13/28209/fAXLBtIDkP.png!large\" alt></p>\n<p>这就一目了然了！绿色部分是我们当前分支 <code>add-func</code> 的内容，蓝色部分是 <code>origin-master</code> 的内容。由于我们两者都要，所以点击 Accept Both Changes。然后略经修正，将 index.js 改为如下：</p>\n<pre class=\"prettyprint language-javascript\"><code>function add(x, y) {\n  return x + y;\n}\n\nfunction multiply(x, y) {\n  return x * y;\n}\n</code></pre><p>提交我们用于处理冲突的 commit：</p>\n<pre class=\"prettyprint language-bash\"><code>$ git add .\n$ git commit -m &quot;Merge conflict of index.js&quot;\n</code></pre><p>冲突处理完成，我们提交此分支，任务完成。</p>\n<h3>小结</h3>\n<p>并行开发是 Git 团队协作中比较高级却又非常重要的部分。平时大多数情况下，我们遇到的都是第一种情况。如果“不幸”遇到了后面两种情况，不熟悉时可以回来看一看这篇文档。</p>\n<p>PS：对于后面两种情况，有一点需要补充：如果想要撤销 merge，使用下面这条命令：</p>\n<pre class=\"prettyprint language-bash\"><code>$ git merge --abort\n</code></pre><h2>提交信息书写规范</h2>\n<p>提交信息，又称为 commit messages 或者 commit logs，是每一步提交所必需的信息。我们可以看一下 React 仓库的提交记录：</p>\n<p><img src=\"https://cdn.learnku.com/uploads/images/202005/13/28209/O15oW23ou6.png!large\" alt></p>\n<p>由此我们可以对项目每一步做了什么有了比较好的了解。</p>\n<h3>格式</h3>\n<p>每次提交，Commit message 都包括三个部分：Header，Body 和 Footer。</p>\n<pre class=\"prettyprint\"><code>&lt;header&gt;\n&#x2F;&#x2F; 空一行\n&lt;body&gt;\n&#x2F;&#x2F; 空一行\n&lt;footer&gt;\n</code></pre><p>其中，Header 是必需的，Body 和 Footer 可以省略。</p>\n<h4>Header</h4>\n<p>Header部分只有一行，是对 commit 的简短概述，是一个包括<strong>动宾结构</strong>和<strong>修改对象（可选）<strong>的</strong>祈使句</strong><em>（不要加句号！）</em>。</p>\n<p>我们来看几个例子。</p>\n<pre class=\"prettyprint\"><code>Remove &#x27;warning&#x27; module from the JS scheduler\n</code></pre><p>这里的动宾结构是 Remove ‘warning’ module，修改对象是 JS scheduler。</p>\n<pre class=\"prettyprint\"><code>Add [@flow](&#x2F;user&#x2F;flow) directive to findDOMNode shim\n</code></pre><p>这里的动宾结构是 Add <a href=\"/user/flow\">@flow</a> directive，修改对象是 findDOMNode shim。</p>\n<pre class=\"prettyprint\"><code>Update www warning shim\n</code></pre><p>这里动宾结构是 Update www warning shim，由于修改对象已经很明确（在动宾结构中），所以无需再写。</p>\n<h4>Body</h4>\n<p>Body 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。</p>\n<pre class=\"prettyprint\"><code>More detailed explanatory text, if necessary.  Wrap it to \nabout 72 characters or so. \n\nFurther paragraphs come after blank lines.\n\n- Bullet points are okay, too\n- Use a hanging indent\n</code></pre><p>有两个注意点。</p>\n<ul>\n<li>\n<p>使用第一人称现在时，比如使用 <code>change</code> 而不是 <code>changed</code> 或 <code>changes</code>。</p>\n</li>\n<li>\n<p>应该说明代码变动的动机，以及与以前行为的对比。</p>\n</li>\n</ul>\n<h4>Footer</h4>\n<p>Footer 部分只用于两种情况。</p>\n<p><strong>（1）不兼容变动</strong></p>\n<p>如果当前代码与上一个版本不兼容，则 Footer 部分以 <code>BREAKING CHANGE</code> 开头，后面是对变动的描述、以及变动理由和迁移方法。</p>\n<p><strong>（2）关闭 Issue</strong></p>\n<p>如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue。</p>\n<pre class=\"prettyprint\"><code>Closes #234\n</code></pre><p>也可以一次关闭多个 issue 。</p>\n<pre class=\"prettyprint\"><code>Closes #123, #245, #992\n</code></pre><p>我们团队<strong>建议在 Pull Request 中关闭 Issue</strong>，如前面<a href=\"https://yuque.com/dhucst/team-collaboration/basic-gitflow#72tlxu\">基本流程</a>所描述的那样。</p>\n<h4>Revert</h4>\n<p>还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以 <code>revert:</code> 开头，后面跟着被撤销 Commit 的 Header。</p>\n<pre class=\"prettyprint\"><code>revert: feat(pencil): add &#x27;graphiteWidth&#x27; option\n\nThis reverts commit 667ecc1654a317a13331b17617d973392f415f02.\n</code></pre><p>Body 部分的格式是固定的，必须写成 <code>This reverts commit &lt;hash&gt;.</code>，其中的 <code>hash</code> 是被撤销 commit 的 SHA 标识符。</p>\n<h3>如何修改</h3>\n<p>一开始写 Commit Message 的时候难免会出现写得不好的情况，一般情况下会有人建议你如何写得更好，或者你自己想到了更合适的写法。这时候该如何修改呢？</p>\n<h4>修改最近一次提交</h4>\n<p>如果你要修改的就是最近一次提交，那就非常简单了。Git 有专门的命令用于轻松修改刚才的提交：</p>\n<pre class=\"prettyprint language-bash\"><code>$ git commit --amend\n</code></pre><p>然后就会进入 vi 界面重新编辑你的提交信息。当然也可以直接用 <code>-m</code> 选项指定提交信息：</p>\n<pre class=\"prettyprint language-bash\"><code>$ git commit --amend -m &quot;Updated commit message&quot;\n</code></pre><p>想要在 <a href=\"https://learngitbranching.js.org/?NODEMO\">Learn Git Branching</a> 看看怎么回事？输入下面的命令体验一下吧：</p>\n<pre class=\"prettyprint language-bash\"><code>$ git commit\n$ git commit --amend\n</code></pre><h4>修改倒数第 n 次的提交</h4>\n<p>下面要介绍的 <code>rebase</code> 命令威力可以说是非常巨大，但是要掌握却实属不易。没事，我们先来看看如何用 <code>rebase</code> 修改倒数第 3 次提交：</p>\n<pre class=\"prettyprint language-bash\"><code>$ git rebase -i HEAD~3\n</code></pre><p><code>-i</code> 的意思是 <code>--interactive</code> ，输入后 Git 就会打开一个 vi 编辑器，并出现下面的内容：</p>\n<pre class=\"prettyprint\"><code>pick 0f78800 倒数第4次提交\npick 459014c 倒数第3次提交\npick 38009c7 倒数第2次提交\npick dff7f7d 最新的提交\n\n# Rebase 500d110..dff7f7d onto 500d110 (4 commands)\n#\n# Commands:\n# p, pick = use commit\n# r, reword = use commit, but edit the commit message\n# e, edit = use commit, but stop for amending\n# s, squash = use commit, but meld into previous commit\n# f, fixup = like &quot;squash&quot;, but discard this commit&#x27;s log message\n# x, exec = run command (the rest of the line) using shell\n# d, drop = remove commit\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n</code></pre><p>其实如果你认真看一下下面的注释，基本上知道怎么做了：把倒数第三次提交前面的 <code>pick</code> 命令改为 <code>reword</code> 。保存后，Git 就会把你带到倒数第 3 次提交的 vi 编辑页面，这时候重新写提交信息就可以了。</p>\n<p>你也可以在 <a href=\"https://learngitbranching.js.org/?NODEMO\">Learn Git Branching</a> 中体验一下 <code>rebase</code> 命令：</p>\n<pre class=\"prettyprint language-bash\"><code>$ reset\n$ git commit\n$ git commit\n$ git rebase -i HEAD~3\n</code></pre><p>Learn Git Branching 提供的是图形化界面，和 Git 的 vi 界面略有区别。</p>\n<h4>强制推送修改</h4>\n<p>有时候可能你已经把分支 <code>push</code> 到远程仓库、甚至已经提交了 Pull Request 了。如果直接 <code>push</code> ，Git 会因为远程和本地的分支冲突而拒绝推送。这时候只需要加上 <code>-f</code> 选项，强制用本地的分支覆盖远程的分支即可：</p>\n<pre class=\"prettyprint language-bash\"><code>$ git push -f\n</code></pre><h3>参考</h3>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html\">阮一峰《Commit message 和 Change log 编写指南》</a></p>\n<h2>代码评审</h2>\n<p>代码评审，又称代码审查，是软件开发流程中必不可少的一环。</p>\n<blockquote>\n<p>代码审查是计算机源代码的系统性检验（有时被称为同行评审）。其目的在于找到开发初期所忽略的错误，从而提高软件的整体质量。\n——Wikipedia</p>\n</blockquote>\n<h3>为什么要代码评审</h3>\n<p>代码评审并不意味着被评审者的能力不足。有下面这些原因表明代码评审的重要性。</p>\n<h4>降低风险</h4>\n<p>写出存在 bug 的代码再正常不过了。每个人贡献的代码先要经过持续集成（CI，Continuous Integration）的一系列构建测试，然后是人工代码审查，因此代码审查可以说是最后一道防线。</p>\n<h4>显著提高代码质量</h4>\n<p>代码评审不仅仅是单纯地查找 bug 或是修正格式问题，还包括使代码更高效。</p>\n<p>在一个团队里，每个人都有自己的背景和特长，因此总有人可能提出更聪明的解决方案，更合适的设计模式，或者能降低复杂性或提高性能的方法。</p>\n<h4>有助于熟悉项目</h4>\n<p>当一个团队在做一个项目时，想要每个开发人员致力于应用的每个部分，这是极不可能的。有时候，会出现这种情况：在某一段时间，一个开发人员正为项目的大部分模块辛苦地工作，而另一个人则完全在做别的东西。</p>\n<h4>知识共享</h4>\n<p>通过合作，每个人都可以相互学习并取得进步。提交代码者很有可能从该工作中得到反馈，并意识到可能存在的问题和需要改进的部分；而审查者也可以通过阅读他人代码学到新的东西，并找出适用于他们自己的工作方案。</p>\n<h3>如何进行代码评审</h3>\n<h4>发起代码评审</h4>\n<p>代码评审发生在 Pull Request 阶段，代码提交者可以请求其他成员的 Review，如下图所示。</p>\n<p><img src=\"https://cdn.learnku.com/uploads/images/202005/13/28209/62Wi6iYXoO.png!large\" alt></p>\n<p>然后被请求进行评审的成员打开这条 Pull Request 页面时会出现一个提示框：</p>\n<p><img src=\"https://cdn.learnku.com/uploads/images/202005/13/28209/k8gOEy7iHd.png!large\" alt></p>\n<p>我们点击 Add your review 按钮，即进入到 Review 页面（或者也可以点击 Files changed 这个 Tab）。Review 页面展示了本次 Pull Request 所有发生改动的文件，评审的过程也就是审查这些发生改动的代码。</p>\n<h4>在 GitHub 上评审</h4>\n<p>直接在 GitHub 的 Pull Request 页面评审是最基本的方法。对于改动比较小的分支，这种方法完全足够。</p>\n<p>有时候我们发现了他人代码的问题。千万不要保留你的意见！要把自己的想法有条理地写下来。我们可以选择特定一行来发表评论，只需把鼠标移到行首，就会显示一个加号，如下图。</p>\n<p><img src=\"https://cdn.learnku.com/uploads/images/202005/13/28209/YbqIQbWtEp.png!large\" alt></p>\n<p>点击加号，就可以对这一行进行评论了：</p>\n<p><img src=\"https://cdn.learnku.com/uploads/images/202005/13/28209/pljPySdTn4.png!large\" alt></p>\n<h4>拉取到本地评审</h4>\n<p>有时候某些分支的改动非常大，大到需要你在本地亲自运行一下，看看是否真的达到了预期的目标。</p>\n<pre class=\"prettyprint language-bash\"><code>$ git fetch origin lots-of-changes\n$ git checkout logs-of-changes\n</code></pre><p>然后你的本地仓库就完成切换到待评审分支的状态了！你可以试着运行，做各种尝试，还可以在自己熟悉的编辑器里面更加舒适地阅读代码，美滋滋。</p>\n<h4>提交评审结果</h4>\n<p>无论是直接在 GitHub 还是在本地审查，最后都要提交评审结果。评审结果包括你在代码行中的所有评论、Review summary 和最终意见。</p>\n<p>Review summary 主要是一些总结性的话语。如果代码提交者确实做得非常优秀，当然是要夸奖一下喔；如果有些地方做得不足，则要给出改进的方向和一些鼓励。</p>\n<p>最终意见有以下三种：</p>\n<ul>\n<li>\n<p>Comment：只是做一些客观评价，对此分支是否可以合并不给出明确意见</p>\n</li>\n<li>\n<p>Approve：同意此分支合并进主分支</p>\n</li>\n<li>\n<p>Request changes：不同意此分支合并，需要进一步修改</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.learnku.com/uploads/images/202005/13/28209/lijmTiO6B4.png!large\" alt></p>\n<p>接着代码提交者根据其他人的评审进行修改后提交，然后再继续评审，如此迭代，直到分支可以合并。</p>\n<h3>最佳实践</h3>\n<h4>对于代码提交者</h4>\n<h5>任务最小化</h5>\n<p>每个开发任务都应当只做一件事情，因此所需评审的代码应可能地少。事实表明，超过 200 行的代码评审的有效性显著降低，超过 400 行时代码评审几乎没有意义。</p>\n<h5>提供足够的上下文</h5>\n<p>在编写代码时应有意识地添加足够的注释或文档，因为你的代码会被很多人阅读。良好的注释能够让团队其他成员评审你的代码时更加轻松，也更容易发现问题所在。另外，在填写 Pull Request 说明信息时，也应该将所解决的问题、发生的相应改变说明清楚。</p>\n<h4>对于评审者</h4>\n<h5>评审最重要的事情</h5>\n<p>不要纠结于代码风格或是格式问题，这些事情会有专门的工具代劳。你应当关注的是下面这些问题：</p>\n<ul>\n<li>\n<p>代码是否具备良好的可读性？</p>\n</li>\n<li>\n<p>能否实现得更简洁、更地道？</p>\n</li>\n<li>\n<p>代码是否遵循了良好的设计原则？</p>\n</li>\n<li>\n<p>代码的空间效率和时间效率怎么样？</p>\n</li>\n</ul>\n<h5>保持积极开放的心态</h5>\n<p>不必过于挑剔，乐于赞扬他人的劳动，学会欣赏他人的代码。</p>\n<blockquote>\n<p>想要学习更多精彩的实战技术教程？来<a href=\"https://tuture.co?utm_source=juejin_zhuanlan\">图雀社区</a>逛逛吧。</p>\n</blockquote>\n</div>",
		"title": "一杯茶的时间，上手 Git 团队协作开发",
		"last_reply_at": "2020-05-13T02:04:04.761Z",
		"good": false,
		"top": false,
		"reply_count": 0,
		"visit_count": 1339,
		"create_at": "2020-05-13T02:04:04.761Z",
		"author": {
			"loginname": "huan1043269994",
			"avatar_url": "https://avatars1.githubusercontent.com/u/18097812?v=3&s=120"
		}
	}, {
		"id": "5eb9fdcd2d0afc4087f545de",
		"author_id": "59a50205bc6d953708128944",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><p>链接： <a href=\"https://podcasts.apple.com/cn/podcast/%E5%88%9B%E4%B8%9A%E5%86%85%E5%B9%95-startup-insider/id1448032419?i=1000456948975\">https://podcasts.apple.com/cn/podcast/创业内幕-startup-insider/id1448032419?i=1000456948975</a>\n内容：zoom CEO的个人分享如何更有激情的工作\n最近公司项目用nest框架在开发新项目，有种使用angular的感觉了，正好早上看到V社分享的文章，<a href=\"https://www.v2ex.com/t/670706#reply25\">长文预警-前端开发的瓶颈与未来之路</a>感觉口味挺对的。做自己爱做的事，结局总不会太差，如果都不是自己爱做的，那就选钱多的。</p>\n</div>",
		"title": "近来晚上闲的听苹果博客有感",
		"last_reply_at": "2020-05-13T01:43:48.135Z",
		"good": false,
		"top": false,
		"reply_count": 5,
		"visit_count": 901,
		"create_at": "2020-05-12T01:37:17.669Z",
		"author": {
			"loginname": "jxycbjhc",
			"avatar_url": "https://avatars0.githubusercontent.com/u/16661897?v=4&s=120"
		}
	}, {
		"id": "5eba3e582d0afc4087f546c8",
		"author_id": "5eba3cf4e785ec40b04fb9f6",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><p>推荐一款轻量级开源自动化运维管理平台<strong>Spug</strong>，轻量，简单好用，不需要安装 Agent。</p>\n<p><strong>功能：</strong></p>\n<ul>\n<li>主机管理</li>\n<li>主机批量执行</li>\n<li>主机在线终端</li>\n<li>应用发布部署</li>\n<li>在线任务计划</li>\n<li>配置中心</li>\n<li>端口，进程，站点监控</li>\n<li>邮件，钉钉，微信报警</li>\n</ul>\n<p>仓库链接：<a href=\"https://github.com/openspug/spug\"></a><a href=\"https://github.com/openspug/spug\">https://github.com/openspug/spug</a>\n感觉不错就点个Star</p>\n</div>",
		"title": "推荐｜开源轻量自动化运维平台Spug",
		"last_reply_at": "2020-05-12T10:41:16.727Z",
		"good": false,
		"top": false,
		"reply_count": 2,
		"visit_count": 640,
		"create_at": "2020-05-12T06:12:40.289Z",
		"author": {
			"loginname": "zyupo",
			"avatar_url": "https://avatars3.githubusercontent.com/u/9361603?v=4&s=120"
		}
	}, {
		"id": "5eb4ca4ce785ec40b04fb105",
		"author_id": "5101d983df9e9fcc584b4bdf",
		"tab": "share",
		"content": "<div class=\"markdown-text\"><h1>背景</h1>\n<p>以前撸的一个简陋版本的 mock 平台，基于 express的，用mongoDB 存储数据，支持mockjs语法。</p>\n<h1>数据库</h1>\n<p>MongoDB</p>\n<h1>依赖</h1>\n<ul>\n<li>express</li>\n<li>mongoose</li>\n<li>mockjs</li>\n</ul>\n<h1>支持的功能</h1>\n<ul>\n<li>mock数据CRUD</li>\n<li>mock数据分类</li>\n<li>mock数据编辑的历史版本对比</li>\n<li>mock数据的预览访问。</li>\n</ul>\n<h1>项目截图</h1>\n<p><img src=\"//static.cnodejs.org/FvFdK8KR7SQy3yO_q_gJToRbFFj7\" alt=\"mock-2.png\">\n<img src=\"//static.cnodejs.org/FuSHzpa5U9mBPTDhImU9zRyQ_l2B\" alt=\"mock-4.png\">\n<img src=\"//static.cnodejs.org/FnGla1La9wBrnCwE9adtNZ4Rj3rs\" alt=\"mock-8.png\">\n<img src=\"//static.cnodejs.org/FvjO_L3cRTncXR9NMpR0f_Yg21gz\" alt=\"mock-13.png\">\n<img src=\"//static.cnodejs.org/FsFM7bSZcYbWD2GGspUnVUIUQZK8\" alt=\"mock-14.png\">\n<img src=\"//static.cnodejs.org/Fia_kB3V2Bx7WpNkxsfarP0hNLHX\" alt=\"mock-15-1.png\"></p>\n<h1>github</h1>\n<p><a href=\"https://github.com/bosscheng/iMock\">https://github.com/bosscheng/iMock</a></p>\n</div>",
		"title": "基于express 的mock工具",
		"last_reply_at": "2020-05-12T09:46:17.308Z",
		"good": false,
		"top": false,
		"reply_count": 2,
		"visit_count": 1248,
		"create_at": "2020-05-08T02:56:12.591Z",
		"author": {
			"loginname": "bosscheng",
			"avatar_url": "//gravatar.com/avatar/6907c087480867f4c4a0e6b9e78f6196?size=48"
		}
	}]
}